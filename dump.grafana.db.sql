PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE `migration_log` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `migration_id` TEXT NOT NULL
, `sql` TEXT NOT NULL
, `success` INTEGER NOT NULL
, `error` TEXT NOT NULL
, `timestamp` DATETIME NOT NULL
);
INSERT INTO migration_log VALUES(1,'create migration_log table',replace('CREATE TABLE IF NOT EXISTS `migration_log` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `migration_id` TEXT NOT NULL\n, `sql` TEXT NOT NULL\n, `success` INTEGER NOT NULL\n, `error` TEXT NOT NULL\n, `timestamp` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(2,'create user table',replace('CREATE TABLE IF NOT EXISTS `user` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `version` INTEGER NOT NULL\n, `login` TEXT NOT NULL\n, `email` TEXT NOT NULL\n, `name` TEXT NULL\n, `password` TEXT NULL\n, `salt` TEXT NULL\n, `rands` TEXT NULL\n, `company` TEXT NULL\n, `account_id` INTEGER NOT NULL\n, `is_admin` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(3,'add unique index user.login','CREATE UNIQUE INDEX `UQE_user_login` ON `user` (`login`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(4,'add unique index user.email','CREATE UNIQUE INDEX `UQE_user_email` ON `user` (`email`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(5,'drop index UQE_user_login - v1','DROP INDEX `UQE_user_login`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(6,'drop index UQE_user_email - v1','DROP INDEX `UQE_user_email`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(7,'Rename table user to user_v1 - v1','ALTER TABLE `user` RENAME TO `user_v1`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(8,'create user table v2',replace('CREATE TABLE IF NOT EXISTS `user` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `version` INTEGER NOT NULL\n, `login` TEXT NOT NULL\n, `email` TEXT NOT NULL\n, `name` TEXT NULL\n, `password` TEXT NULL\n, `salt` TEXT NULL\n, `rands` TEXT NULL\n, `company` TEXT NULL\n, `org_id` INTEGER NOT NULL\n, `is_admin` INTEGER NOT NULL\n, `email_verified` INTEGER NULL\n, `theme` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(9,'create index UQE_user_login - v2','CREATE UNIQUE INDEX `UQE_user_login` ON `user` (`login`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(10,'create index UQE_user_email - v2','CREATE UNIQUE INDEX `UQE_user_email` ON `user` (`email`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(11,'copy data_source v1 to v2',replace('INSERT INTO `user` (`rands`\n, `updated`\n, `email`\n, `login`\n, `password`\n, `org_id`\n, `id`\n, `is_admin`\n, `name`\n, `salt`\n, `company`\n, `created`\n, `version`) SELECT `rands`\n, `updated`\n, `email`\n, `login`\n, `password`\n, `account_id`\n, `id`\n, `is_admin`\n, `name`\n, `salt`\n, `company`\n, `created`\n, `version` FROM `user_v1`','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(12,'Drop old table user_v1','DROP TABLE IF EXISTS `user_v1`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(13,'Add column help_flags1 to user table','alter table `user` ADD COLUMN `help_flags1` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(14,'Update user table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(15,'Add last_seen_at column to user','alter table `user` ADD COLUMN `last_seen_at` DATETIME NULL ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(16,'Add missing user data','code migration',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(17,'Add is_disabled column to user','alter table `user` ADD COLUMN `is_disabled` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(18,'Add index user.login/user.email','CREATE INDEX `IDX_user_login_email` ON `user` (`login`,`email`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(19,'Add is_service_account column to user','alter table `user` ADD COLUMN `is_service_account` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(20,'Update is_service_account column to nullable',replace('ALTER TABLE user ADD COLUMN tmp_service_account BOOLEAN DEFAULT 0;\nUPDATE user SET tmp_service_account = is_service_account;\nALTER TABLE user DROP COLUMN is_service_account;\nALTER TABLE user RENAME COLUMN tmp_service_account TO is_service_account;','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(21,'create temp user table v1-7',replace('CREATE TABLE IF NOT EXISTS `temp_user` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `version` INTEGER NOT NULL\n, `email` TEXT NOT NULL\n, `name` TEXT NULL\n, `role` TEXT NULL\n, `code` TEXT NOT NULL\n, `status` TEXT NOT NULL\n, `invited_by_user_id` INTEGER NULL\n, `email_sent` INTEGER NOT NULL\n, `email_sent_on` DATETIME NULL\n, `remote_addr` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(22,'create index IDX_temp_user_email - v1-7','CREATE INDEX `IDX_temp_user_email` ON `temp_user` (`email`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(23,'create index IDX_temp_user_org_id - v1-7','CREATE INDEX `IDX_temp_user_org_id` ON `temp_user` (`org_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(24,'create index IDX_temp_user_code - v1-7','CREATE INDEX `IDX_temp_user_code` ON `temp_user` (`code`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(25,'create index IDX_temp_user_status - v1-7','CREATE INDEX `IDX_temp_user_status` ON `temp_user` (`status`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(26,'Update temp_user table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(27,'drop index IDX_temp_user_email - v1','DROP INDEX `IDX_temp_user_email`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(28,'drop index IDX_temp_user_org_id - v1','DROP INDEX `IDX_temp_user_org_id`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(29,'drop index IDX_temp_user_code - v1','DROP INDEX `IDX_temp_user_code`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(30,'drop index IDX_temp_user_status - v1','DROP INDEX `IDX_temp_user_status`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(31,'Rename table temp_user to temp_user_tmp_qwerty - v1','ALTER TABLE `temp_user` RENAME TO `temp_user_tmp_qwerty`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(32,'create temp_user v2',replace('CREATE TABLE IF NOT EXISTS `temp_user` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `version` INTEGER NOT NULL\n, `email` TEXT NOT NULL\n, `name` TEXT NULL\n, `role` TEXT NULL\n, `code` TEXT NOT NULL\n, `status` TEXT NOT NULL\n, `invited_by_user_id` INTEGER NULL\n, `email_sent` INTEGER NOT NULL\n, `email_sent_on` DATETIME NULL\n, `remote_addr` TEXT NULL\n, `created` INTEGER NOT NULL DEFAULT 0\n, `updated` INTEGER NOT NULL DEFAULT 0\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(33,'create index IDX_temp_user_email - v2','CREATE INDEX `IDX_temp_user_email` ON `temp_user` (`email`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(34,'create index IDX_temp_user_org_id - v2','CREATE INDEX `IDX_temp_user_org_id` ON `temp_user` (`org_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(35,'create index IDX_temp_user_code - v2','CREATE INDEX `IDX_temp_user_code` ON `temp_user` (`code`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(36,'create index IDX_temp_user_status - v2','CREATE INDEX `IDX_temp_user_status` ON `temp_user` (`status`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(37,'copy temp_user v1 to v2',replace('INSERT INTO `temp_user` (`org_id`\n, `version`\n, `status`\n, `email_sent`\n, `remote_addr`\n, `id`\n, `email`\n, `name`\n, `role`\n, `code`\n, `invited_by_user_id`\n, `email_sent_on`) SELECT `org_id`\n, `version`\n, `status`\n, `email_sent`\n, `remote_addr`\n, `id`\n, `email`\n, `name`\n, `role`\n, `code`\n, `invited_by_user_id`\n, `email_sent_on` FROM `temp_user_tmp_qwerty`','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(38,'drop temp_user_tmp_qwerty','DROP TABLE IF EXISTS `temp_user_tmp_qwerty`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(39,'Set created for temp users that will otherwise prematurely expire','code migration',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(40,'create star table',replace('CREATE TABLE IF NOT EXISTS `star` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `user_id` INTEGER NOT NULL\n, `dashboard_id` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(41,'add unique index star.user_id_dashboard_id','CREATE UNIQUE INDEX `UQE_star_user_id_dashboard_id` ON `star` (`user_id`,`dashboard_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(42,'create org table v1',replace('CREATE TABLE IF NOT EXISTS `org` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `version` INTEGER NOT NULL\n, `name` TEXT NOT NULL\n, `address1` TEXT NULL\n, `address2` TEXT NULL\n, `city` TEXT NULL\n, `state` TEXT NULL\n, `zip_code` TEXT NULL\n, `country` TEXT NULL\n, `billing_email` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(43,'create index UQE_org_name - v1','CREATE UNIQUE INDEX `UQE_org_name` ON `org` (`name`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(44,'create org_user table v1',replace('CREATE TABLE IF NOT EXISTS `org_user` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `user_id` INTEGER NOT NULL\n, `role` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(45,'create index IDX_org_user_org_id - v1','CREATE INDEX `IDX_org_user_org_id` ON `org_user` (`org_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(46,'create index UQE_org_user_org_id_user_id - v1','CREATE UNIQUE INDEX `UQE_org_user_org_id_user_id` ON `org_user` (`org_id`,`user_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(47,'create index IDX_org_user_user_id - v1','CREATE INDEX `IDX_org_user_user_id` ON `org_user` (`user_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(48,'Update org table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(49,'Update org_user table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(50,'Migrate all Read Only Viewers to Viewers','UPDATE org_user SET role = ''Viewer'' WHERE role = ''Read Only Editor''',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(51,'create dashboard table',replace('CREATE TABLE IF NOT EXISTS `dashboard` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `version` INTEGER NOT NULL\n, `slug` TEXT NOT NULL\n, `title` TEXT NOT NULL\n, `data` TEXT NOT NULL\n, `account_id` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(52,'add index dashboard.account_id','CREATE INDEX `IDX_dashboard_account_id` ON `dashboard` (`account_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(53,'add unique index dashboard_account_id_slug','CREATE UNIQUE INDEX `UQE_dashboard_account_id_slug` ON `dashboard` (`account_id`,`slug`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(54,'create dashboard_tag table',replace('CREATE TABLE IF NOT EXISTS `dashboard_tag` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `dashboard_id` INTEGER NOT NULL\n, `term` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(55,'add unique index dashboard_tag.dasboard_id_term','CREATE UNIQUE INDEX `UQE_dashboard_tag_dashboard_id_term` ON `dashboard_tag` (`dashboard_id`,`term`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(56,'drop index UQE_dashboard_tag_dashboard_id_term - v1','DROP INDEX `UQE_dashboard_tag_dashboard_id_term`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(57,'Rename table dashboard to dashboard_v1 - v1','ALTER TABLE `dashboard` RENAME TO `dashboard_v1`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(58,'create dashboard v2',replace('CREATE TABLE IF NOT EXISTS `dashboard` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `version` INTEGER NOT NULL\n, `slug` TEXT NOT NULL\n, `title` TEXT NOT NULL\n, `data` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(59,'create index IDX_dashboard_org_id - v2','CREATE INDEX `IDX_dashboard_org_id` ON `dashboard` (`org_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(60,'create index UQE_dashboard_org_id_slug - v2','CREATE UNIQUE INDEX `UQE_dashboard_org_id_slug` ON `dashboard` (`org_id`,`slug`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(61,'copy dashboard v1 to v2',replace('INSERT INTO `dashboard` (`org_id`\n, `created`\n, `updated`\n, `id`\n, `version`\n, `slug`\n, `title`\n, `data`) SELECT `account_id`\n, `created`\n, `updated`\n, `id`\n, `version`\n, `slug`\n, `title`\n, `data` FROM `dashboard_v1`','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(62,'drop table dashboard_v1','DROP TABLE IF EXISTS `dashboard_v1`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(63,'alter dashboard.data to mediumtext v1','SELECT 0;',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(64,'Add column updated_by in dashboard - v2','alter table `dashboard` ADD COLUMN `updated_by` INTEGER NULL ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(65,'Add column created_by in dashboard - v2','alter table `dashboard` ADD COLUMN `created_by` INTEGER NULL ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(66,'Add column gnetId in dashboard','alter table `dashboard` ADD COLUMN `gnet_id` INTEGER NULL ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(67,'Add index for gnetId in dashboard','CREATE INDEX `IDX_dashboard_gnet_id` ON `dashboard` (`gnet_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(68,'Add column plugin_id in dashboard','alter table `dashboard` ADD COLUMN `plugin_id` TEXT NULL ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(69,'Add index for plugin_id in dashboard','CREATE INDEX `IDX_dashboard_org_id_plugin_id` ON `dashboard` (`org_id`,`plugin_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(70,'Add index for dashboard_id in dashboard_tag','CREATE INDEX `IDX_dashboard_tag_dashboard_id` ON `dashboard_tag` (`dashboard_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(71,'Update dashboard table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(72,'Update dashboard_tag table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(73,'Add column folder_id in dashboard','alter table `dashboard` ADD COLUMN `folder_id` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(74,'Add column isFolder in dashboard','alter table `dashboard` ADD COLUMN `is_folder` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(75,'Add column has_acl in dashboard','alter table `dashboard` ADD COLUMN `has_acl` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(76,'Add column uid in dashboard','alter table `dashboard` ADD COLUMN `uid` TEXT NULL ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(77,'Update uid column values in dashboard','UPDATE dashboard SET uid=printf(''%09d'',id) WHERE uid IS NULL;',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(78,'Add unique index dashboard_org_id_uid','CREATE UNIQUE INDEX `UQE_dashboard_org_id_uid` ON `dashboard` (`org_id`,`uid`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(79,'Remove unique index org_id_slug','DROP INDEX `UQE_dashboard_org_id_slug`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(80,'Update dashboard title length','-- NOT REQUIRED',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(81,'Add unique index for dashboard_org_id_title_folder_id','CREATE UNIQUE INDEX `UQE_dashboard_org_id_folder_id_title` ON `dashboard` (`org_id`,`folder_id`,`title`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(82,'create dashboard_provisioning',replace('CREATE TABLE IF NOT EXISTS `dashboard_provisioning` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `dashboard_id` INTEGER NULL\n, `name` TEXT NOT NULL\n, `external_id` TEXT NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(83,'Rename table dashboard_provisioning to dashboard_provisioning_tmp_qwerty - v1','ALTER TABLE `dashboard_provisioning` RENAME TO `dashboard_provisioning_tmp_qwerty`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(84,'create dashboard_provisioning v2',replace('CREATE TABLE IF NOT EXISTS `dashboard_provisioning` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `dashboard_id` INTEGER NULL\n, `name` TEXT NOT NULL\n, `external_id` TEXT NOT NULL\n, `updated` INTEGER NOT NULL DEFAULT 0\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(85,'create index IDX_dashboard_provisioning_dashboard_id - v2','CREATE INDEX `IDX_dashboard_provisioning_dashboard_id` ON `dashboard_provisioning` (`dashboard_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(86,'create index IDX_dashboard_provisioning_dashboard_id_name - v2','CREATE INDEX `IDX_dashboard_provisioning_dashboard_id_name` ON `dashboard_provisioning` (`dashboard_id`,`name`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(87,'copy dashboard_provisioning v1 to v2',replace('INSERT INTO `dashboard_provisioning` (`id`\n, `dashboard_id`\n, `name`\n, `external_id`) SELECT `id`\n, `dashboard_id`\n, `name`\n, `external_id` FROM `dashboard_provisioning_tmp_qwerty`','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(88,'drop dashboard_provisioning_tmp_qwerty','DROP TABLE IF EXISTS `dashboard_provisioning_tmp_qwerty`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(89,'Add check_sum column','alter table `dashboard_provisioning` ADD COLUMN `check_sum` TEXT NULL ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(90,'Add index for dashboard_title','CREATE INDEX `IDX_dashboard_title` ON `dashboard` (`title`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(91,'delete tags for deleted dashboards','DELETE FROM dashboard_tag WHERE dashboard_id NOT IN (SELECT id FROM dashboard)',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(92,'delete stars for deleted dashboards','DELETE FROM star WHERE dashboard_id NOT IN (SELECT id FROM dashboard)',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(93,'Add index for dashboard_is_folder','CREATE INDEX `IDX_dashboard_is_folder` ON `dashboard` (`is_folder`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(94,'Add isPublic for dashboard','alter table `dashboard` ADD COLUMN `is_public` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(95,'create data_source table',replace('CREATE TABLE IF NOT EXISTS `data_source` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `account_id` INTEGER NOT NULL\n, `version` INTEGER NOT NULL\n, `type` TEXT NOT NULL\n, `name` TEXT NOT NULL\n, `access` TEXT NOT NULL\n, `url` TEXT NOT NULL\n, `password` TEXT NULL\n, `user` TEXT NULL\n, `database` TEXT NULL\n, `basic_auth` INTEGER NOT NULL\n, `basic_auth_user` TEXT NULL\n, `basic_auth_password` TEXT NULL\n, `is_default` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(96,'add index data_source.account_id','CREATE INDEX `IDX_data_source_account_id` ON `data_source` (`account_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(97,'add unique index data_source.account_id_name','CREATE UNIQUE INDEX `UQE_data_source_account_id_name` ON `data_source` (`account_id`,`name`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(98,'drop index IDX_data_source_account_id - v1','DROP INDEX `IDX_data_source_account_id`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(99,'drop index UQE_data_source_account_id_name - v1','DROP INDEX `UQE_data_source_account_id_name`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(100,'Rename table data_source to data_source_v1 - v1','ALTER TABLE `data_source` RENAME TO `data_source_v1`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(101,'create data_source table v2',replace('CREATE TABLE IF NOT EXISTS `data_source` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `version` INTEGER NOT NULL\n, `type` TEXT NOT NULL\n, `name` TEXT NOT NULL\n, `access` TEXT NOT NULL\n, `url` TEXT NOT NULL\n, `password` TEXT NULL\n, `user` TEXT NULL\n, `database` TEXT NULL\n, `basic_auth` INTEGER NOT NULL\n, `basic_auth_user` TEXT NULL\n, `basic_auth_password` TEXT NULL\n, `is_default` INTEGER NOT NULL\n, `json_data` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(102,'create index IDX_data_source_org_id - v2','CREATE INDEX `IDX_data_source_org_id` ON `data_source` (`org_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(103,'create index UQE_data_source_org_id_name - v2','CREATE UNIQUE INDEX `UQE_data_source_org_id_name` ON `data_source` (`org_id`,`name`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(104,'Drop old table data_source_v1 #2','DROP TABLE IF EXISTS `data_source_v1`',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(105,'Add column with_credentials','alter table `data_source` ADD COLUMN `with_credentials` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(106,'Add secure json data column','alter table `data_source` ADD COLUMN `secure_json_data` TEXT NULL ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(107,'Update data_source table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(108,'Update initial version to 1','UPDATE data_source SET version = 1 WHERE version = 0',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(109,'Add read_only data column','alter table `data_source` ADD COLUMN `read_only` INTEGER NULL ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(110,'Migrate logging ds to loki ds','UPDATE data_source SET type = ''loki'' WHERE type = ''logging''',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(111,'Update json_data with nulls','UPDATE data_source SET json_data = ''{}'' WHERE json_data is null',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(112,'Add uid column','alter table `data_source` ADD COLUMN `uid` TEXT NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(113,'Update uid value','UPDATE data_source SET uid=printf(''%09d'',id);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(114,'Add unique index datasource_org_id_uid','CREATE UNIQUE INDEX `UQE_data_source_org_id_uid` ON `data_source` (`org_id`,`uid`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(115,'add unique index datasource_org_id_is_default','CREATE INDEX `IDX_data_source_org_id_is_default` ON `data_source` (`org_id`,`is_default`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(116,'create api_key table',replace('CREATE TABLE IF NOT EXISTS `api_key` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `account_id` INTEGER NOT NULL\n, `name` TEXT NOT NULL\n, `key` TEXT NOT NULL\n, `role` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(117,'add index api_key.account_id','CREATE INDEX `IDX_api_key_account_id` ON `api_key` (`account_id`);',1,'','2024-02-07 21:34:36');
INSERT INTO migration_log VALUES(118,'add index api_key.key','CREATE UNIQUE INDEX `UQE_api_key_key` ON `api_key` (`key`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(119,'add index api_key.account_id_name','CREATE UNIQUE INDEX `UQE_api_key_account_id_name` ON `api_key` (`account_id`,`name`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(120,'drop index IDX_api_key_account_id - v1','DROP INDEX `IDX_api_key_account_id`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(121,'drop index UQE_api_key_key - v1','DROP INDEX `UQE_api_key_key`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(122,'drop index UQE_api_key_account_id_name - v1','DROP INDEX `UQE_api_key_account_id_name`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(123,'Rename table api_key to api_key_v1 - v1','ALTER TABLE `api_key` RENAME TO `api_key_v1`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(124,'create api_key table v2',replace('CREATE TABLE IF NOT EXISTS `api_key` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `name` TEXT NOT NULL\n, `key` TEXT NOT NULL\n, `role` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(125,'create index IDX_api_key_org_id - v2','CREATE INDEX `IDX_api_key_org_id` ON `api_key` (`org_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(126,'create index UQE_api_key_key - v2','CREATE UNIQUE INDEX `UQE_api_key_key` ON `api_key` (`key`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(127,'create index UQE_api_key_org_id_name - v2','CREATE UNIQUE INDEX `UQE_api_key_org_id_name` ON `api_key` (`org_id`,`name`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(128,'copy api_key v1 to v2',replace('INSERT INTO `api_key` (`org_id`\n, `name`\n, `key`\n, `role`\n, `created`\n, `updated`\n, `id`) SELECT `account_id`\n, `name`\n, `key`\n, `role`\n, `created`\n, `updated`\n, `id` FROM `api_key_v1`','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(129,'Drop old table api_key_v1','DROP TABLE IF EXISTS `api_key_v1`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(130,'Update api_key table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(131,'Add expires to api_key table','alter table `api_key` ADD COLUMN `expires` INTEGER NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(132,'Add service account foreign key','alter table `api_key` ADD COLUMN `service_account_id` INTEGER NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(133,'set service account foreign key to nil if 0','UPDATE api_key SET service_account_id = NULL WHERE service_account_id = 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(134,'Add last_used_at to api_key table','alter table `api_key` ADD COLUMN `last_used_at` DATETIME NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(135,'Add is_revoked column to api_key table','alter table `api_key` ADD COLUMN `is_revoked` INTEGER NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(136,'create dashboard_snapshot table v4',replace('CREATE TABLE IF NOT EXISTS `dashboard_snapshot` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `name` TEXT NOT NULL\n, `key` TEXT NOT NULL\n, `dashboard` TEXT NOT NULL\n, `expires` DATETIME NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(137,'drop table dashboard_snapshot_v4 #1','DROP TABLE IF EXISTS `dashboard_snapshot`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(138,'create dashboard_snapshot table v5 #2',replace('CREATE TABLE IF NOT EXISTS `dashboard_snapshot` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `name` TEXT NOT NULL\n, `key` TEXT NOT NULL\n, `delete_key` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `user_id` INTEGER NOT NULL\n, `external` INTEGER NOT NULL\n, `external_url` TEXT NOT NULL\n, `dashboard` TEXT NOT NULL\n, `expires` DATETIME NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(139,'create index UQE_dashboard_snapshot_key - v5','CREATE UNIQUE INDEX `UQE_dashboard_snapshot_key` ON `dashboard_snapshot` (`key`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(140,'create index UQE_dashboard_snapshot_delete_key - v5','CREATE UNIQUE INDEX `UQE_dashboard_snapshot_delete_key` ON `dashboard_snapshot` (`delete_key`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(141,'create index IDX_dashboard_snapshot_user_id - v5','CREATE INDEX `IDX_dashboard_snapshot_user_id` ON `dashboard_snapshot` (`user_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(142,'alter dashboard_snapshot to mediumtext v2','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(143,'Update dashboard_snapshot table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(144,'Add column external_delete_url to dashboard_snapshots table','alter table `dashboard_snapshot` ADD COLUMN `external_delete_url` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(145,'Add encrypted dashboard json column','alter table `dashboard_snapshot` ADD COLUMN `dashboard_encrypted` BLOB NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(146,'Change dashboard_encrypted column to MEDIUMBLOB','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(147,'create quota table v1',replace('CREATE TABLE IF NOT EXISTS `quota` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NULL\n, `user_id` INTEGER NULL\n, `target` TEXT NOT NULL\n, `limit` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(148,'create index UQE_quota_org_id_user_id_target - v1','CREATE UNIQUE INDEX `UQE_quota_org_id_user_id_target` ON `quota` (`org_id`,`user_id`,`target`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(149,'Update quota table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(150,'create plugin_setting table',replace('CREATE TABLE IF NOT EXISTS `plugin_setting` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NULL\n, `plugin_id` TEXT NOT NULL\n, `enabled` INTEGER NOT NULL\n, `pinned` INTEGER NOT NULL\n, `json_data` TEXT NULL\n, `secure_json_data` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(151,'create index UQE_plugin_setting_org_id_plugin_id - v1','CREATE UNIQUE INDEX `UQE_plugin_setting_org_id_plugin_id` ON `plugin_setting` (`org_id`,`plugin_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(152,'Add column plugin_version to plugin_settings','alter table `plugin_setting` ADD COLUMN `plugin_version` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(153,'Update plugin_setting table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(154,'create session table',replace('CREATE TABLE IF NOT EXISTS `session` (\n`key` TEXT PRIMARY KEY NOT NULL\n, `data` BLOB NOT NULL\n, `expiry` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(155,'Drop old table playlist table','DROP TABLE IF EXISTS `playlist`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(156,'Drop old table playlist_item table','DROP TABLE IF EXISTS `playlist_item`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(157,'create playlist table v2',replace('CREATE TABLE IF NOT EXISTS `playlist` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `name` TEXT NOT NULL\n, `interval` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(158,'create playlist item table v2',replace('CREATE TABLE IF NOT EXISTS `playlist_item` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `playlist_id` INTEGER NOT NULL\n, `type` TEXT NOT NULL\n, `value` TEXT NOT NULL\n, `title` TEXT NOT NULL\n, `order` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(159,'Update playlist table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(160,'Update playlist_item table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(161,'Add playlist column created_at','alter table `playlist` ADD COLUMN `created_at` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(162,'Add playlist column updated_at','alter table `playlist` ADD COLUMN `updated_at` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(163,'drop preferences table v2','DROP TABLE IF EXISTS `preferences`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(164,'drop preferences table v3','DROP TABLE IF EXISTS `preferences`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(165,'create preferences table v3',replace('CREATE TABLE IF NOT EXISTS `preferences` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `user_id` INTEGER NOT NULL\n, `version` INTEGER NOT NULL\n, `home_dashboard_id` INTEGER NOT NULL\n, `timezone` TEXT NOT NULL\n, `theme` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(166,'Update preferences table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(167,'Add column team_id in preferences','alter table `preferences` ADD COLUMN `team_id` INTEGER NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(168,'Update team_id column values in preferences','UPDATE preferences SET team_id=0 WHERE team_id IS NULL;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(169,'Add column week_start in preferences','alter table `preferences` ADD COLUMN `week_start` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(170,'Add column preferences.json_data','alter table `preferences` ADD COLUMN `json_data` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(171,'alter preferences.json_data to mediumtext v1','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(172,'Add preferences index org_id','CREATE INDEX `IDX_preferences_org_id` ON `preferences` (`org_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(173,'Add preferences index user_id','CREATE INDEX `IDX_preferences_user_id` ON `preferences` (`user_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(174,'create alert table v1',replace('CREATE TABLE IF NOT EXISTS `alert` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `version` INTEGER NOT NULL\n, `dashboard_id` INTEGER NOT NULL\n, `panel_id` INTEGER NOT NULL\n, `org_id` INTEGER NOT NULL\n, `name` TEXT NOT NULL\n, `message` TEXT NOT NULL\n, `state` TEXT NOT NULL\n, `settings` TEXT NOT NULL\n, `frequency` INTEGER NOT NULL\n, `handler` INTEGER NOT NULL\n, `severity` TEXT NOT NULL\n, `silenced` INTEGER NOT NULL\n, `execution_error` TEXT NOT NULL\n, `eval_data` TEXT NULL\n, `eval_date` DATETIME NULL\n, `new_state_date` DATETIME NOT NULL\n, `state_changes` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(175,'add index alert org_id & id ','CREATE INDEX `IDX_alert_org_id_id` ON `alert` (`org_id`,`id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(176,'add index alert state','CREATE INDEX `IDX_alert_state` ON `alert` (`state`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(177,'add index alert dashboard_id','CREATE INDEX `IDX_alert_dashboard_id` ON `alert` (`dashboard_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(178,'Create alert_rule_tag table v1',replace('CREATE TABLE IF NOT EXISTS `alert_rule_tag` (\n`alert_id` INTEGER NOT NULL\n, `tag_id` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(179,'Add unique index alert_rule_tag.alert_id_tag_id','CREATE UNIQUE INDEX `UQE_alert_rule_tag_alert_id_tag_id` ON `alert_rule_tag` (`alert_id`,`tag_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(180,'drop index UQE_alert_rule_tag_alert_id_tag_id - v1','DROP INDEX `UQE_alert_rule_tag_alert_id_tag_id`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(181,'Rename table alert_rule_tag to alert_rule_tag_v1 - v1','ALTER TABLE `alert_rule_tag` RENAME TO `alert_rule_tag_v1`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(182,'Create alert_rule_tag table v2',replace('CREATE TABLE IF NOT EXISTS `alert_rule_tag` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `alert_id` INTEGER NOT NULL\n, `tag_id` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(183,'create index UQE_alert_rule_tag_alert_id_tag_id - Add unique index alert_rule_tag.alert_id_tag_id V2','CREATE UNIQUE INDEX `UQE_alert_rule_tag_alert_id_tag_id` ON `alert_rule_tag` (`alert_id`,`tag_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(184,'copy alert_rule_tag v1 to v2',replace('INSERT INTO `alert_rule_tag` (`alert_id`\n, `tag_id`) SELECT `alert_id`\n, `tag_id` FROM `alert_rule_tag_v1`','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(185,'drop table alert_rule_tag_v1','DROP TABLE IF EXISTS `alert_rule_tag_v1`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(186,'create alert_notification table v1',replace('CREATE TABLE IF NOT EXISTS `alert_notification` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `name` TEXT NOT NULL\n, `type` TEXT NOT NULL\n, `settings` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(187,'Add column is_default','alter table `alert_notification` ADD COLUMN `is_default` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(188,'Add column frequency','alter table `alert_notification` ADD COLUMN `frequency` INTEGER NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(189,'Add column send_reminder','alter table `alert_notification` ADD COLUMN `send_reminder` INTEGER NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(190,'Add column disable_resolve_message','alter table `alert_notification` ADD COLUMN `disable_resolve_message` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(191,'add index alert_notification org_id & name','CREATE UNIQUE INDEX `UQE_alert_notification_org_id_name` ON `alert_notification` (`org_id`,`name`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(192,'Update alert table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(193,'Update alert_notification table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(194,'create notification_journal table v1',replace('CREATE TABLE IF NOT EXISTS `alert_notification_journal` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `alert_id` INTEGER NOT NULL\n, `notifier_id` INTEGER NOT NULL\n, `sent_at` INTEGER NOT NULL\n, `success` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(195,'add index notification_journal org_id & alert_id & notifier_id','CREATE INDEX `IDX_alert_notification_journal_org_id_alert_id_notifier_id` ON `alert_notification_journal` (`org_id`,`alert_id`,`notifier_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(196,'drop alert_notification_journal','DROP TABLE IF EXISTS `alert_notification_journal`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(197,'create alert_notification_state table v1',replace('CREATE TABLE IF NOT EXISTS `alert_notification_state` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `alert_id` INTEGER NOT NULL\n, `notifier_id` INTEGER NOT NULL\n, `state` TEXT NOT NULL\n, `version` INTEGER NOT NULL\n, `updated_at` INTEGER NOT NULL\n, `alert_rule_state_updated_version` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(198,'add index alert_notification_state org_id & alert_id & notifier_id','CREATE UNIQUE INDEX `UQE_alert_notification_state_org_id_alert_id_notifier_id` ON `alert_notification_state` (`org_id`,`alert_id`,`notifier_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(199,'Add for to alert table','alter table `alert` ADD COLUMN `for` INTEGER NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(200,'Add column uid in alert_notification','alter table `alert_notification` ADD COLUMN `uid` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(201,'Update uid column values in alert_notification','UPDATE alert_notification SET uid=printf(''%09d'',id) WHERE uid IS NULL;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(202,'Add unique index alert_notification_org_id_uid','CREATE UNIQUE INDEX `UQE_alert_notification_org_id_uid` ON `alert_notification` (`org_id`,`uid`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(203,'Remove unique index org_id_name','DROP INDEX `UQE_alert_notification_org_id_name`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(204,'Add column secure_settings in alert_notification','alter table `alert_notification` ADD COLUMN `secure_settings` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(205,'alter alert.settings to mediumtext','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(206,'Add non-unique index alert_notification_state_alert_id','CREATE INDEX `IDX_alert_notification_state_alert_id` ON `alert_notification_state` (`alert_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(207,'Add non-unique index alert_rule_tag_alert_id','CREATE INDEX `IDX_alert_rule_tag_alert_id` ON `alert_rule_tag` (`alert_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(208,'Drop old annotation table v4','DROP TABLE IF EXISTS `annotation`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(209,'create annotation table v5',replace('CREATE TABLE IF NOT EXISTS `annotation` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `alert_id` INTEGER NULL\n, `user_id` INTEGER NULL\n, `dashboard_id` INTEGER NULL\n, `panel_id` INTEGER NULL\n, `category_id` INTEGER NULL\n, `type` TEXT NOT NULL\n, `title` TEXT NOT NULL\n, `text` TEXT NOT NULL\n, `metric` TEXT NULL\n, `prev_state` TEXT NOT NULL\n, `new_state` TEXT NOT NULL\n, `data` TEXT NOT NULL\n, `epoch` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(210,'add index annotation 0 v3','CREATE INDEX `IDX_annotation_org_id_alert_id` ON `annotation` (`org_id`,`alert_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(211,'add index annotation 1 v3','CREATE INDEX `IDX_annotation_org_id_type` ON `annotation` (`org_id`,`type`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(212,'add index annotation 2 v3','CREATE INDEX `IDX_annotation_org_id_category_id` ON `annotation` (`org_id`,`category_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(213,'add index annotation 3 v3','CREATE INDEX `IDX_annotation_org_id_dashboard_id_panel_id_epoch` ON `annotation` (`org_id`,`dashboard_id`,`panel_id`,`epoch`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(214,'add index annotation 4 v3','CREATE INDEX `IDX_annotation_org_id_epoch` ON `annotation` (`org_id`,`epoch`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(215,'Update annotation table charset','-- NOT REQUIRED',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(216,'Add column region_id to annotation table','alter table `annotation` ADD COLUMN `region_id` INTEGER NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(217,'Drop category_id index','DROP INDEX `IDX_annotation_org_id_category_id`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(218,'Add column tags to annotation table','alter table `annotation` ADD COLUMN `tags` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(219,'Create annotation_tag table v2',replace('CREATE TABLE IF NOT EXISTS `annotation_tag` (\n`annotation_id` INTEGER NOT NULL\n, `tag_id` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(220,'Add unique index annotation_tag.annotation_id_tag_id','CREATE UNIQUE INDEX `UQE_annotation_tag_annotation_id_tag_id` ON `annotation_tag` (`annotation_id`,`tag_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(221,'drop index UQE_annotation_tag_annotation_id_tag_id - v2','DROP INDEX `UQE_annotation_tag_annotation_id_tag_id`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(222,'Rename table annotation_tag to annotation_tag_v2 - v2','ALTER TABLE `annotation_tag` RENAME TO `annotation_tag_v2`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(223,'Create annotation_tag table v3',replace('CREATE TABLE IF NOT EXISTS `annotation_tag` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `annotation_id` INTEGER NOT NULL\n, `tag_id` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(224,'create index UQE_annotation_tag_annotation_id_tag_id - Add unique index annotation_tag.annotation_id_tag_id V3','CREATE UNIQUE INDEX `UQE_annotation_tag_annotation_id_tag_id` ON `annotation_tag` (`annotation_id`,`tag_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(225,'copy annotation_tag v2 to v3',replace('INSERT INTO `annotation_tag` (`annotation_id`\n, `tag_id`) SELECT `annotation_id`\n, `tag_id` FROM `annotation_tag_v2`','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(226,'drop table annotation_tag_v2','DROP TABLE IF EXISTS `annotation_tag_v2`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(227,'Update alert annotations and set TEXT to empty','UPDATE annotation SET TEXT = '''' WHERE alert_id > 0',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(228,'Add created time to annotation table','alter table `annotation` ADD COLUMN `created` INTEGER NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(229,'Add updated time to annotation table','alter table `annotation` ADD COLUMN `updated` INTEGER NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(230,'Add index for created in annotation table','CREATE INDEX `IDX_annotation_org_id_created` ON `annotation` (`org_id`,`created`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(231,'Add index for updated in annotation table','CREATE INDEX `IDX_annotation_org_id_updated` ON `annotation` (`org_id`,`updated`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(232,'Convert existing annotations from seconds to milliseconds','UPDATE annotation SET epoch = (epoch*1000) where epoch < 9999999999',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(233,'Add epoch_end column','alter table `annotation` ADD COLUMN `epoch_end` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(234,'Add index for epoch_end','CREATE INDEX `IDX_annotation_org_id_epoch_epoch_end` ON `annotation` (`org_id`,`epoch`,`epoch_end`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(235,'Make epoch_end the same as epoch','UPDATE annotation SET epoch_end = epoch',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(236,'Move region to single row','code migration',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(237,'Remove index org_id_epoch from annotation table','DROP INDEX `IDX_annotation_org_id_epoch`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(238,'Remove index org_id_dashboard_id_panel_id_epoch from annotation table','DROP INDEX `IDX_annotation_org_id_dashboard_id_panel_id_epoch`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(239,'Add index for org_id_dashboard_id_epoch_end_epoch on annotation table','CREATE INDEX `IDX_annotation_org_id_dashboard_id_epoch_end_epoch` ON `annotation` (`org_id`,`dashboard_id`,`epoch_end`,`epoch`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(240,'Add index for org_id_epoch_end_epoch on annotation table','CREATE INDEX `IDX_annotation_org_id_epoch_end_epoch` ON `annotation` (`org_id`,`epoch_end`,`epoch`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(241,'Remove index org_id_epoch_epoch_end from annotation table','DROP INDEX `IDX_annotation_org_id_epoch_epoch_end`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(242,'Add index for alert_id on annotation table','CREATE INDEX `IDX_annotation_alert_id` ON `annotation` (`alert_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(243,'Increase tags column to length 4096','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(244,'create test_data table',replace('CREATE TABLE IF NOT EXISTS `test_data` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `metric1` TEXT NULL\n, `metric2` TEXT NULL\n, `value_big_int` INTEGER NULL\n, `value_double` REAL NULL\n, `value_float` REAL NULL\n, `value_int` INTEGER NULL\n, `time_epoch` INTEGER NOT NULL\n, `time_date_time` DATETIME NOT NULL\n, `time_time_stamp` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(245,'create dashboard_version table v1',replace('CREATE TABLE IF NOT EXISTS `dashboard_version` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `dashboard_id` INTEGER NOT NULL\n, `parent_version` INTEGER NOT NULL\n, `restored_from` INTEGER NOT NULL\n, `version` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `created_by` INTEGER NOT NULL\n, `message` TEXT NOT NULL\n, `data` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(246,'add index dashboard_version.dashboard_id','CREATE INDEX `IDX_dashboard_version_dashboard_id` ON `dashboard_version` (`dashboard_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(247,'add unique index dashboard_version.dashboard_id and dashboard_version.version','CREATE UNIQUE INDEX `UQE_dashboard_version_dashboard_id_version` ON `dashboard_version` (`dashboard_id`,`version`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(248,'Set dashboard version to 1 where 0','UPDATE dashboard SET version = 1 WHERE version = 0',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(249,'save existing dashboard data in dashboard_version table v1',replace('INSERT INTO dashboard_version\n(\n	dashboard_id,\n	version,\n	parent_version,\n	restored_from,\n	created,\n	created_by,\n	message,\n	data\n)\nSELECT\n	dashboard.id,\n	dashboard.version,\n	dashboard.version,\n	dashboard.version,\n	dashboard.updated,\n	COALESCE(dashboard.updated_by, -1),\n	'''',\n	dashboard.data\nFROM dashboard;','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(250,'alter dashboard_version.data to mediumtext v1','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(251,'create team table',replace('CREATE TABLE IF NOT EXISTS `team` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `name` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(252,'add index team.org_id','CREATE INDEX `IDX_team_org_id` ON `team` (`org_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(253,'add unique index team_org_id_name','CREATE UNIQUE INDEX `UQE_team_org_id_name` ON `team` (`org_id`,`name`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(254,'Add column uid in team','alter table `team` ADD COLUMN `uid` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(255,'Update uid column values in team','UPDATE team SET uid=printf(''t%09d'',id) WHERE uid IS NULL;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(256,'Add unique index team_org_id_uid','CREATE UNIQUE INDEX `UQE_team_org_id_uid` ON `team` (`org_id`,`uid`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(257,'create team member table',replace('CREATE TABLE IF NOT EXISTS `team_member` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `team_id` INTEGER NOT NULL\n, `user_id` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(258,'add index team_member.org_id','CREATE INDEX `IDX_team_member_org_id` ON `team_member` (`org_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(259,'add unique index team_member_org_id_team_id_user_id','CREATE UNIQUE INDEX `UQE_team_member_org_id_team_id_user_id` ON `team_member` (`org_id`,`team_id`,`user_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(260,'add index team_member.team_id','CREATE INDEX `IDX_team_member_team_id` ON `team_member` (`team_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(261,'Add column email to team table','alter table `team` ADD COLUMN `email` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(262,'Add column external to team_member table','alter table `team_member` ADD COLUMN `external` INTEGER NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(263,'Add column permission to team_member table','alter table `team_member` ADD COLUMN `permission` INTEGER NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(264,'create dashboard acl table',replace('CREATE TABLE IF NOT EXISTS `dashboard_acl` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `dashboard_id` INTEGER NOT NULL\n, `user_id` INTEGER NULL\n, `team_id` INTEGER NULL\n, `permission` INTEGER NOT NULL DEFAULT 4\n, `role` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(265,'add index dashboard_acl_dashboard_id','CREATE INDEX `IDX_dashboard_acl_dashboard_id` ON `dashboard_acl` (`dashboard_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(266,'add unique index dashboard_acl_dashboard_id_user_id','CREATE UNIQUE INDEX `UQE_dashboard_acl_dashboard_id_user_id` ON `dashboard_acl` (`dashboard_id`,`user_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(267,'add unique index dashboard_acl_dashboard_id_team_id','CREATE UNIQUE INDEX `UQE_dashboard_acl_dashboard_id_team_id` ON `dashboard_acl` (`dashboard_id`,`team_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(268,'add index dashboard_acl_user_id','CREATE INDEX `IDX_dashboard_acl_user_id` ON `dashboard_acl` (`user_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(269,'add index dashboard_acl_team_id','CREATE INDEX `IDX_dashboard_acl_team_id` ON `dashboard_acl` (`team_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(270,'add index dashboard_acl_org_id_role','CREATE INDEX `IDX_dashboard_acl_org_id_role` ON `dashboard_acl` (`org_id`,`role`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(271,'add index dashboard_permission','CREATE INDEX `IDX_dashboard_acl_permission` ON `dashboard_acl` (`permission`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(272,'save default acl rules in dashboard_acl table',replace('\nINSERT INTO dashboard_acl\n	(\n		org_id,\n		dashboard_id,\n		permission,\n		role,\n		created,\n		updated\n	)\n	VALUES\n		(-1,-1, 1,''Viewer'',''2017-06-20'',''2017-06-20''),\n		(-1,-1, 2,''Editor'',''2017-06-20'',''2017-06-20'')\n	','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(273,'delete acl rules for deleted dashboards and folders','DELETE FROM dashboard_acl WHERE dashboard_id NOT IN (SELECT id FROM dashboard) AND dashboard_id != -1',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(274,'create tag table',replace('CREATE TABLE IF NOT EXISTS `tag` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `key` TEXT NOT NULL\n, `value` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(275,'add index tag.key_value','CREATE UNIQUE INDEX `UQE_tag_key_value` ON `tag` (`key`,`value`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(276,'create login attempt table',replace('CREATE TABLE IF NOT EXISTS `login_attempt` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `username` TEXT NOT NULL\n, `ip_address` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(277,'add index login_attempt.username','CREATE INDEX `IDX_login_attempt_username` ON `login_attempt` (`username`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(278,'drop index IDX_login_attempt_username - v1','DROP INDEX `IDX_login_attempt_username`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(279,'Rename table login_attempt to login_attempt_tmp_qwerty - v1','ALTER TABLE `login_attempt` RENAME TO `login_attempt_tmp_qwerty`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(280,'create login_attempt v2',replace('CREATE TABLE IF NOT EXISTS `login_attempt` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `username` TEXT NOT NULL\n, `ip_address` TEXT NOT NULL\n, `created` INTEGER NOT NULL DEFAULT 0\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(281,'create index IDX_login_attempt_username - v2','CREATE INDEX `IDX_login_attempt_username` ON `login_attempt` (`username`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(282,'copy login_attempt v1 to v2',replace('INSERT INTO `login_attempt` (`id`\n, `username`\n, `ip_address`) SELECT `id`\n, `username`\n, `ip_address` FROM `login_attempt_tmp_qwerty`','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(283,'drop login_attempt_tmp_qwerty','DROP TABLE IF EXISTS `login_attempt_tmp_qwerty`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(284,'create user auth table',replace('CREATE TABLE IF NOT EXISTS `user_auth` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `user_id` INTEGER NOT NULL\n, `auth_module` TEXT NOT NULL\n, `auth_id` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(285,'create index IDX_user_auth_auth_module_auth_id - v1','CREATE INDEX `IDX_user_auth_auth_module_auth_id` ON `user_auth` (`auth_module`,`auth_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(286,'alter user_auth.auth_id to length 190','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(287,'Add OAuth access token to user_auth','alter table `user_auth` ADD COLUMN `o_auth_access_token` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(288,'Add OAuth refresh token to user_auth','alter table `user_auth` ADD COLUMN `o_auth_refresh_token` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(289,'Add OAuth token type to user_auth','alter table `user_auth` ADD COLUMN `o_auth_token_type` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(290,'Add OAuth expiry to user_auth','alter table `user_auth` ADD COLUMN `o_auth_expiry` DATETIME NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(291,'Add index to user_id column in user_auth','CREATE INDEX `IDX_user_auth_user_id` ON `user_auth` (`user_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(292,'Add OAuth ID token to user_auth','alter table `user_auth` ADD COLUMN `o_auth_id_token` TEXT NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(293,'create server_lock table',replace('CREATE TABLE IF NOT EXISTS `server_lock` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `operation_uid` TEXT NOT NULL\n, `version` INTEGER NOT NULL\n, `last_execution` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(294,'add index server_lock.operation_uid','CREATE UNIQUE INDEX `UQE_server_lock_operation_uid` ON `server_lock` (`operation_uid`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(295,'create user auth token table',replace('CREATE TABLE IF NOT EXISTS `user_auth_token` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `user_id` INTEGER NOT NULL\n, `auth_token` TEXT NOT NULL\n, `prev_auth_token` TEXT NOT NULL\n, `user_agent` TEXT NOT NULL\n, `client_ip` TEXT NOT NULL\n, `auth_token_seen` INTEGER NOT NULL\n, `seen_at` INTEGER NULL\n, `rotated_at` INTEGER NOT NULL\n, `created_at` INTEGER NOT NULL\n, `updated_at` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(296,'add unique index user_auth_token.auth_token','CREATE UNIQUE INDEX `UQE_user_auth_token_auth_token` ON `user_auth_token` (`auth_token`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(297,'add unique index user_auth_token.prev_auth_token','CREATE UNIQUE INDEX `UQE_user_auth_token_prev_auth_token` ON `user_auth_token` (`prev_auth_token`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(298,'add index user_auth_token.user_id','CREATE INDEX `IDX_user_auth_token_user_id` ON `user_auth_token` (`user_id`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(299,'Add revoked_at to the user auth token','alter table `user_auth_token` ADD COLUMN `revoked_at` INTEGER NULL ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(300,'add index user_auth_token.revoked_at','CREATE INDEX `IDX_user_auth_token_revoked_at` ON `user_auth_token` (`revoked_at`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(301,'create cache_data table',replace('CREATE TABLE IF NOT EXISTS `cache_data` (\n`cache_key` TEXT PRIMARY KEY NOT NULL\n, `data` BLOB NOT NULL\n, `expires` INTEGER NOT NULL\n, `created_at` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(302,'add unique index cache_data.cache_key','CREATE UNIQUE INDEX `UQE_cache_data_cache_key` ON `cache_data` (`cache_key`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(303,'create short_url table v1',replace('CREATE TABLE IF NOT EXISTS `short_url` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `uid` TEXT NOT NULL\n, `path` TEXT NOT NULL\n, `created_by` INTEGER NOT NULL\n, `created_at` INTEGER NOT NULL\n, `last_seen_at` INTEGER NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(304,'add index short_url.org_id-uid','CREATE UNIQUE INDEX `UQE_short_url_org_id_uid` ON `short_url` (`org_id`,`uid`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(305,'alter table short_url alter column created_by type to bigint','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(306,'delete alert_definition table','DROP TABLE IF EXISTS `alert_definition`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(307,'recreate alert_definition table',replace('CREATE TABLE IF NOT EXISTS `alert_definition` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `title` TEXT NOT NULL\n, `condition` TEXT NOT NULL\n, `data` TEXT NOT NULL\n, `updated` DATETIME NOT NULL\n, `interval_seconds` INTEGER NOT NULL DEFAULT 60\n, `version` INTEGER NOT NULL DEFAULT 0\n, `uid` TEXT NOT NULL DEFAULT 0\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(308,'add index in alert_definition on org_id and title columns','CREATE INDEX `IDX_alert_definition_org_id_title` ON `alert_definition` (`org_id`,`title`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(309,'add index in alert_definition on org_id and uid columns','CREATE INDEX `IDX_alert_definition_org_id_uid` ON `alert_definition` (`org_id`,`uid`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(310,'alter alert_definition table data column to mediumtext in mysql','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(311,'drop index in alert_definition on org_id and title columns','DROP INDEX `IDX_alert_definition_org_id_title`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(312,'drop index in alert_definition on org_id and uid columns','DROP INDEX `IDX_alert_definition_org_id_uid`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(313,'add unique index in alert_definition on org_id and title columns','CREATE UNIQUE INDEX `UQE_alert_definition_org_id_title` ON `alert_definition` (`org_id`,`title`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(314,'add unique index in alert_definition on org_id and uid columns','CREATE UNIQUE INDEX `UQE_alert_definition_org_id_uid` ON `alert_definition` (`org_id`,`uid`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(315,'Add column paused in alert_definition','alter table `alert_definition` ADD COLUMN `paused` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(316,'drop alert_definition table','DROP TABLE IF EXISTS `alert_definition`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(317,'delete alert_definition_version table','DROP TABLE IF EXISTS `alert_definition_version`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(318,'recreate alert_definition_version table',replace('CREATE TABLE IF NOT EXISTS `alert_definition_version` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `alert_definition_id` INTEGER NOT NULL\n, `alert_definition_uid` TEXT NOT NULL DEFAULT 0\n, `parent_version` INTEGER NOT NULL\n, `restored_from` INTEGER NOT NULL\n, `version` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `title` TEXT NOT NULL\n, `condition` TEXT NOT NULL\n, `data` TEXT NOT NULL\n, `interval_seconds` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(319,'add index in alert_definition_version table on alert_definition_id and version columns','CREATE UNIQUE INDEX `UQE_alert_definition_version_alert_definition_id_version` ON `alert_definition_version` (`alert_definition_id`,`version`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(320,'add index in alert_definition_version table on alert_definition_uid and version columns','CREATE UNIQUE INDEX `UQE_alert_definition_version_alert_definition_uid_version` ON `alert_definition_version` (`alert_definition_uid`,`version`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(321,'alter alert_definition_version table data column to mediumtext in mysql','SELECT 0;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(322,'drop alert_definition_version table','DROP TABLE IF EXISTS `alert_definition_version`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(323,'create alert_instance table',replace('CREATE TABLE IF NOT EXISTS `alert_instance` (\n`def_org_id` INTEGER NOT NULL\n, `def_uid` TEXT NOT NULL DEFAULT 0\n, `labels` TEXT NOT NULL\n, `labels_hash` TEXT NOT NULL\n, `current_state` TEXT NOT NULL\n, `current_state_since` INTEGER NOT NULL\n, `last_eval_time` INTEGER NOT NULL\n, PRIMARY KEY ( `def_org_id`,`def_uid`,`labels_hash` ));','\n',char(10)),1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(324,'add index in alert_instance table on def_org_id, def_uid and current_state columns','CREATE INDEX `IDX_alert_instance_def_org_id_def_uid_current_state` ON `alert_instance` (`def_org_id`,`def_uid`,`current_state`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(325,'add index in alert_instance table on def_org_id, current_state columns','CREATE INDEX `IDX_alert_instance_def_org_id_current_state` ON `alert_instance` (`def_org_id`,`current_state`);',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(326,'add column current_state_end to alert_instance','alter table `alert_instance` ADD COLUMN `current_state_end` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(327,'remove index def_org_id, def_uid, current_state on alert_instance','DROP INDEX `IDX_alert_instance_def_org_id_def_uid_current_state`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(328,'remove index def_org_id, current_state on alert_instance','DROP INDEX `IDX_alert_instance_def_org_id_current_state`',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(329,'rename def_org_id to rule_org_id in alert_instance','ALTER TABLE alert_instance RENAME COLUMN def_org_id TO rule_org_id;',1,'','2024-02-07 21:34:37');
INSERT INTO migration_log VALUES(330,'rename def_uid to rule_uid in alert_instance','ALTER TABLE alert_instance RENAME COLUMN def_uid TO rule_uid;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(331,'add index rule_org_id, rule_uid, current_state on alert_instance','CREATE INDEX `IDX_alert_instance_rule_org_id_rule_uid_current_state` ON `alert_instance` (`rule_org_id`,`rule_uid`,`current_state`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(332,'add index rule_org_id, current_state on alert_instance','CREATE INDEX `IDX_alert_instance_rule_org_id_current_state` ON `alert_instance` (`rule_org_id`,`current_state`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(333,'add current_reason column related to current_state','alter table `alert_instance` ADD COLUMN `current_reason` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(334,'add result_fingerprint column to alert_instance','alter table `alert_instance` ADD COLUMN `result_fingerprint` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(335,'create alert_rule table',replace('CREATE TABLE IF NOT EXISTS `alert_rule` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `title` TEXT NOT NULL\n, `condition` TEXT NOT NULL\n, `data` TEXT NOT NULL\n, `updated` DATETIME NOT NULL\n, `interval_seconds` INTEGER NOT NULL DEFAULT 60\n, `version` INTEGER NOT NULL DEFAULT 0\n, `uid` TEXT NOT NULL DEFAULT 0\n, `namespace_uid` TEXT NOT NULL\n, `rule_group` TEXT NOT NULL\n, `no_data_state` TEXT NOT NULL DEFAULT ''NoData''\n, `exec_err_state` TEXT NOT NULL DEFAULT ''Alerting''\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(336,'add index in alert_rule on org_id and title columns','CREATE UNIQUE INDEX `UQE_alert_rule_org_id_title` ON `alert_rule` (`org_id`,`title`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(337,'add index in alert_rule on org_id and uid columns','CREATE UNIQUE INDEX `UQE_alert_rule_org_id_uid` ON `alert_rule` (`org_id`,`uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(338,'add index in alert_rule on org_id, namespace_uid, group_uid columns','CREATE INDEX `IDX_alert_rule_org_id_namespace_uid_rule_group` ON `alert_rule` (`org_id`,`namespace_uid`,`rule_group`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(339,'alter alert_rule table data column to mediumtext in mysql','SELECT 0;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(340,'add column for to alert_rule','alter table `alert_rule` ADD COLUMN `for` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(341,'add column annotations to alert_rule','alter table `alert_rule` ADD COLUMN `annotations` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(342,'add column labels to alert_rule','alter table `alert_rule` ADD COLUMN `labels` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(343,'remove unique index from alert_rule on org_id, title columns','DROP INDEX `UQE_alert_rule_org_id_title`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(344,'add index in alert_rule on org_id, namespase_uid and title columns','CREATE UNIQUE INDEX `UQE_alert_rule_org_id_namespace_uid_title` ON `alert_rule` (`org_id`,`namespace_uid`,`title`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(345,'add dashboard_uid column to alert_rule','alter table `alert_rule` ADD COLUMN `dashboard_uid` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(346,'add panel_id column to alert_rule','alter table `alert_rule` ADD COLUMN `panel_id` INTEGER NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(347,'add index in alert_rule on org_id, dashboard_uid and panel_id columns','CREATE INDEX `IDX_alert_rule_org_id_dashboard_uid_panel_id` ON `alert_rule` (`org_id`,`dashboard_uid`,`panel_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(348,'add rule_group_idx column to alert_rule','alter table `alert_rule` ADD COLUMN `rule_group_idx` INTEGER NOT NULL DEFAULT 1 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(349,'add is_paused column to alert_rule table','alter table `alert_rule` ADD COLUMN `is_paused` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(350,'fix is_paused column for alert_rule table','SELECT 0;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(351,'create alert_rule_version table',replace('CREATE TABLE IF NOT EXISTS `alert_rule_version` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `rule_org_id` INTEGER NOT NULL\n, `rule_uid` TEXT NOT NULL DEFAULT 0\n, `rule_namespace_uid` TEXT NOT NULL\n, `rule_group` TEXT NOT NULL\n, `parent_version` INTEGER NOT NULL\n, `restored_from` INTEGER NOT NULL\n, `version` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `title` TEXT NOT NULL\n, `condition` TEXT NOT NULL\n, `data` TEXT NOT NULL\n, `interval_seconds` INTEGER NOT NULL\n, `no_data_state` TEXT NOT NULL DEFAULT ''NoData''\n, `exec_err_state` TEXT NOT NULL DEFAULT ''Alerting''\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(352,'add index in alert_rule_version table on rule_org_id, rule_uid and version columns','CREATE UNIQUE INDEX `UQE_alert_rule_version_rule_org_id_rule_uid_version` ON `alert_rule_version` (`rule_org_id`,`rule_uid`,`version`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(353,'add index in alert_rule_version table on rule_org_id, rule_namespace_uid and rule_group columns','CREATE INDEX `IDX_alert_rule_version_rule_org_id_rule_namespace_uid_rule_group` ON `alert_rule_version` (`rule_org_id`,`rule_namespace_uid`,`rule_group`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(354,'alter alert_rule_version table data column to mediumtext in mysql','SELECT 0;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(355,'add column for to alert_rule_version','alter table `alert_rule_version` ADD COLUMN `for` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(356,'add column annotations to alert_rule_version','alter table `alert_rule_version` ADD COLUMN `annotations` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(357,'add column labels to alert_rule_version','alter table `alert_rule_version` ADD COLUMN `labels` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(358,'add rule_group_idx column to alert_rule_version','alter table `alert_rule_version` ADD COLUMN `rule_group_idx` INTEGER NOT NULL DEFAULT 1 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(359,'add is_paused column to alert_rule_versions table','alter table `alert_rule_version` ADD COLUMN `is_paused` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(360,'fix is_paused column for alert_rule_version table','SELECT 0;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(361,'create_alert_configuration_table',replace('CREATE TABLE IF NOT EXISTS `alert_configuration` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `alertmanager_configuration` TEXT NOT NULL\n, `configuration_version` TEXT NOT NULL\n, `created_at` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(362,'Add column default in alert_configuration','alter table `alert_configuration` ADD COLUMN `default` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(363,'alert alert_configuration alertmanager_configuration column from TEXT to MEDIUMTEXT if mysql','SELECT 0;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(364,'add column org_id in alert_configuration','alter table `alert_configuration` ADD COLUMN `org_id` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(365,'add index in alert_configuration table on org_id column','CREATE INDEX `IDX_alert_configuration_org_id` ON `alert_configuration` (`org_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(366,'add configuration_hash column to alert_configuration','alter table `alert_configuration` ADD COLUMN `configuration_hash` TEXT NOT NULL DEFAULT ''not-yet-calculated'' ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(367,'create_ngalert_configuration_table',replace('CREATE TABLE IF NOT EXISTS `ngalert_configuration` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `alertmanagers` TEXT NULL\n, `created_at` INTEGER NOT NULL\n, `updated_at` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(368,'add index in ngalert_configuration on org_id column','CREATE UNIQUE INDEX `UQE_ngalert_configuration_org_id` ON `ngalert_configuration` (`org_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(369,'add column send_alerts_to in ngalert_configuration','alter table `ngalert_configuration` ADD COLUMN `send_alerts_to` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(370,'create provenance_type table',replace('CREATE TABLE IF NOT EXISTS `provenance_type` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `record_key` TEXT NOT NULL\n, `record_type` TEXT NOT NULL\n, `provenance` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(371,'add index to uniquify (record_key, record_type, org_id) columns','CREATE UNIQUE INDEX `UQE_provenance_type_record_type_record_key_org_id` ON `provenance_type` (`record_type`,`record_key`,`org_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(372,'create alert_image table',replace('CREATE TABLE IF NOT EXISTS `alert_image` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `token` TEXT NOT NULL\n, `path` TEXT NOT NULL\n, `url` TEXT NOT NULL\n, `created_at` DATETIME NOT NULL\n, `expires_at` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(373,'add unique index on token to alert_image table','CREATE UNIQUE INDEX `UQE_alert_image_token` ON `alert_image` (`token`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(374,'support longer URLs in alert_image table','SELECT 0;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(375,'create_alert_configuration_history_table',replace('CREATE TABLE IF NOT EXISTS `alert_configuration_history` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL DEFAULT 0\n, `alertmanager_configuration` TEXT NOT NULL\n, `configuration_hash` TEXT NOT NULL DEFAULT ''not-yet-calculated''\n, `configuration_version` TEXT NOT NULL\n, `created_at` INTEGER NOT NULL\n, `default` INTEGER NOT NULL DEFAULT 0\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(376,'drop non-unique orgID index on alert_configuration','DROP INDEX `IDX_alert_configuration_org_id`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(377,'drop unique orgID index on alert_configuration if exists','DROP INDEX `UQE_alert_configuration_org_id`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(378,'extract alertmanager configuration history to separate table','code migration',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(379,'add unique index on orgID to alert_configuration','CREATE UNIQUE INDEX `UQE_alert_configuration_org_id` ON `alert_configuration` (`org_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(380,'add last_applied column to alert_configuration_history','alter table `alert_configuration_history` ADD COLUMN `last_applied` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(381,'create library_element table v1',replace('CREATE TABLE IF NOT EXISTS `library_element` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `folder_id` INTEGER NOT NULL\n, `uid` TEXT NOT NULL\n, `name` TEXT NOT NULL\n, `kind` INTEGER NOT NULL\n, `type` TEXT NOT NULL\n, `description` TEXT NOT NULL\n, `model` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `created_by` INTEGER NOT NULL\n, `updated` DATETIME NOT NULL\n, `updated_by` INTEGER NOT NULL\n, `version` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(382,'add index library_element org_id-folder_id-name-kind','CREATE UNIQUE INDEX `UQE_library_element_org_id_folder_id_name_kind` ON `library_element` (`org_id`,`folder_id`,`name`,`kind`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(383,'create library_element_connection table v1',replace('CREATE TABLE IF NOT EXISTS `library_element_connection` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `element_id` INTEGER NOT NULL\n, `kind` INTEGER NOT NULL\n, `connection_id` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `created_by` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(384,'add index library_element_connection element_id-kind-connection_id','CREATE UNIQUE INDEX `UQE_library_element_connection_element_id_kind_connection_id` ON `library_element_connection` (`element_id`,`kind`,`connection_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(385,'add unique index library_element org_id_uid','CREATE UNIQUE INDEX `UQE_library_element_org_id_uid` ON `library_element` (`org_id`,`uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(386,'increase max description length to 2048','-- NOT REQUIRED',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(387,'alter library_element model to mediumtext','SELECT 0;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(388,'clone move dashboard alerts to unified alerting','code migration',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(389,'create data_keys table',replace('CREATE TABLE IF NOT EXISTS `data_keys` (\n`name` TEXT PRIMARY KEY NOT NULL\n, `active` INTEGER NOT NULL\n, `scope` TEXT NOT NULL\n, `provider` TEXT NOT NULL\n, `encrypted_data` BLOB NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(390,'create secrets table',replace('CREATE TABLE IF NOT EXISTS `secrets` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `namespace` TEXT NOT NULL\n, `type` TEXT NOT NULL\n, `value` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(391,'rename data_keys name column to id','ALTER TABLE `data_keys` RENAME COLUMN `name` TO `id`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(392,'add name column into data_keys','alter table `data_keys` ADD COLUMN `name` TEXT NOT NULL DEFAULT '''' ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(393,'copy data_keys id column values into name','UPDATE data_keys SET name = id',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(394,'rename data_keys name column to label','ALTER TABLE `data_keys` RENAME COLUMN `name` TO `label`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(395,'rename data_keys id column back to name','ALTER TABLE `data_keys` RENAME COLUMN `id` TO `name`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(396,'create kv_store table v1',replace('CREATE TABLE IF NOT EXISTS `kv_store` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `namespace` TEXT NOT NULL\n, `key` TEXT NOT NULL\n, `value` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(397,'add index kv_store.org_id-namespace-key','CREATE UNIQUE INDEX `UQE_kv_store_org_id_namespace_key` ON `kv_store` (`org_id`,`namespace`,`key`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(398,'update dashboard_uid and panel_id from existing annotations','set dashboard_uid and panel_id migration',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(399,'create permission table',replace('CREATE TABLE IF NOT EXISTS `permission` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `role_id` INTEGER NOT NULL\n, `action` TEXT NOT NULL\n, `scope` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(400,'add unique index permission.role_id','CREATE INDEX `IDX_permission_role_id` ON `permission` (`role_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(401,'add unique index role_id_action_scope','CREATE UNIQUE INDEX `UQE_permission_role_id_action_scope` ON `permission` (`role_id`,`action`,`scope`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(402,'create role table',replace('CREATE TABLE IF NOT EXISTS `role` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `name` TEXT NOT NULL\n, `description` TEXT NULL\n, `version` INTEGER NOT NULL\n, `org_id` INTEGER NOT NULL\n, `uid` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(403,'add column display_name','alter table `role` ADD COLUMN `display_name` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(404,'add column group_name','alter table `role` ADD COLUMN `group_name` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(405,'add index role.org_id','CREATE INDEX `IDX_role_org_id` ON `role` (`org_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(406,'add unique index role_org_id_name','CREATE UNIQUE INDEX `UQE_role_org_id_name` ON `role` (`org_id`,`name`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(407,'add index role_org_id_uid','CREATE UNIQUE INDEX `UQE_role_org_id_uid` ON `role` (`org_id`,`uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(408,'create team role table',replace('CREATE TABLE IF NOT EXISTS `team_role` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `team_id` INTEGER NOT NULL\n, `role_id` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(409,'add index team_role.org_id','CREATE INDEX `IDX_team_role_org_id` ON `team_role` (`org_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(410,'add unique index team_role_org_id_team_id_role_id','CREATE UNIQUE INDEX `UQE_team_role_org_id_team_id_role_id` ON `team_role` (`org_id`,`team_id`,`role_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(411,'add index team_role.team_id','CREATE INDEX `IDX_team_role_team_id` ON `team_role` (`team_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(412,'create user role table',replace('CREATE TABLE IF NOT EXISTS `user_role` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `user_id` INTEGER NOT NULL\n, `role_id` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(413,'add index user_role.org_id','CREATE INDEX `IDX_user_role_org_id` ON `user_role` (`org_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(414,'add unique index user_role_org_id_user_id_role_id','CREATE UNIQUE INDEX `UQE_user_role_org_id_user_id_role_id` ON `user_role` (`org_id`,`user_id`,`role_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(415,'add index user_role.user_id','CREATE INDEX `IDX_user_role_user_id` ON `user_role` (`user_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(416,'create builtin role table',replace('CREATE TABLE IF NOT EXISTS `builtin_role` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `role` TEXT NOT NULL\n, `role_id` INTEGER NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(417,'add index builtin_role.role_id','CREATE INDEX `IDX_builtin_role_role_id` ON `builtin_role` (`role_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(418,'add index builtin_role.name','CREATE INDEX `IDX_builtin_role_role` ON `builtin_role` (`role`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(419,'Add column org_id to builtin_role table','alter table `builtin_role` ADD COLUMN `org_id` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(420,'add index builtin_role.org_id','CREATE INDEX `IDX_builtin_role_org_id` ON `builtin_role` (`org_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(421,'add unique index builtin_role_org_id_role_id_role','CREATE UNIQUE INDEX `UQE_builtin_role_org_id_role_id_role` ON `builtin_role` (`org_id`,`role_id`,`role`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(422,'Remove unique index role_org_id_uid','DROP INDEX `UQE_role_org_id_uid`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(423,'add unique index role.uid','CREATE UNIQUE INDEX `UQE_role_uid` ON `role` (`uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(424,'create seed assignment table',replace('CREATE TABLE IF NOT EXISTS `seed_assignment` (\n`builtin_role` TEXT NOT NULL\n, `role_name` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(425,'add unique index builtin_role_role_name','CREATE UNIQUE INDEX `UQE_seed_assignment_builtin_role_role_name` ON `seed_assignment` (`builtin_role`,`role_name`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(426,'add column hidden to role table','alter table `role` ADD COLUMN `hidden` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(427,'permission kind migration','alter table `permission` ADD COLUMN `kind` TEXT NOT NULL DEFAULT '''' ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(428,'permission attribute migration','alter table `permission` ADD COLUMN `attribute` TEXT NOT NULL DEFAULT '''' ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(429,'permission identifier migration','alter table `permission` ADD COLUMN `identifier` TEXT NOT NULL DEFAULT '''' ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(430,'add permission identifier index','CREATE INDEX `IDX_permission_identifier` ON `permission` (`identifier`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(431,'create query_history table v1',replace('CREATE TABLE IF NOT EXISTS `query_history` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `uid` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `datasource_uid` TEXT NOT NULL\n, `created_by` INTEGER NOT NULL\n, `created_at` INTEGER NOT NULL\n, `comment` TEXT NOT NULL\n, `queries` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(432,'add index query_history.org_id-created_by-datasource_uid','CREATE INDEX `IDX_query_history_org_id_created_by_datasource_uid` ON `query_history` (`org_id`,`created_by`,`datasource_uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(433,'alter table query_history alter column created_by type to bigint','SELECT 0;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(434,'rbac disabled migrator','code migration',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(435,'teams permissions migration','code migration',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(436,'dashboard permissions','code migration',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(437,'dashboard permissions uid scopes','code migration',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(438,'drop managed folder create actions','code migration',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(439,'alerting notification permissions','code migration',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(440,'create query_history_star table v1',replace('CREATE TABLE IF NOT EXISTS `query_history_star` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `query_uid` TEXT NOT NULL\n, `user_id` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(441,'add index query_history.user_id-query_uid','CREATE UNIQUE INDEX `UQE_query_history_star_user_id_query_uid` ON `query_history_star` (`user_id`,`query_uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(442,'add column org_id in query_history_star','alter table `query_history_star` ADD COLUMN `org_id` INTEGER NOT NULL DEFAULT 1 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(443,'alter table query_history_star_mig column user_id type to bigint','SELECT 0;',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(444,'create correlation table v1',replace('CREATE TABLE IF NOT EXISTS `correlation` (\n`uid` TEXT NOT NULL\n, `source_uid` TEXT NOT NULL\n, `target_uid` TEXT NULL\n, `label` TEXT NOT NULL\n, `description` TEXT NOT NULL\n, PRIMARY KEY ( `uid`,`source_uid` ));','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(445,'add index correlations.uid','CREATE INDEX `IDX_correlation_uid` ON `correlation` (`uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(446,'add index correlations.source_uid','CREATE INDEX `IDX_correlation_source_uid` ON `correlation` (`source_uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(447,'add correlation config column','alter table `correlation` ADD COLUMN `config` TEXT NULL ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(448,'drop index IDX_correlation_uid - v1','DROP INDEX `IDX_correlation_uid`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(449,'drop index IDX_correlation_source_uid - v1','DROP INDEX `IDX_correlation_source_uid`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(450,'Rename table correlation to correlation_tmp_qwerty - v1','ALTER TABLE `correlation` RENAME TO `correlation_tmp_qwerty`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(451,'create correlation v2',replace('CREATE TABLE IF NOT EXISTS `correlation` (\n`uid` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL DEFAULT 0\n, `source_uid` TEXT NOT NULL\n, `target_uid` TEXT NULL\n, `label` TEXT NOT NULL\n, `description` TEXT NOT NULL\n, `config` TEXT NULL\n, PRIMARY KEY ( `uid`,`org_id`,`source_uid` ));','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(452,'create index IDX_correlation_uid - v2','CREATE INDEX `IDX_correlation_uid` ON `correlation` (`uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(453,'create index IDX_correlation_source_uid - v2','CREATE INDEX `IDX_correlation_source_uid` ON `correlation` (`source_uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(454,'create index IDX_correlation_org_id - v2','CREATE INDEX `IDX_correlation_org_id` ON `correlation` (`org_id`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(455,'copy correlation v1 to v2',replace('INSERT INTO `correlation` (`source_uid`\n, `target_uid`\n, `label`\n, `description`\n, `config`\n, `uid`) SELECT `source_uid`\n, `target_uid`\n, `label`\n, `description`\n, `config`\n, `uid` FROM `correlation_tmp_qwerty`','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(456,'drop correlation_tmp_qwerty','DROP TABLE IF EXISTS `correlation_tmp_qwerty`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(457,'add provisioning column','alter table `correlation` ADD COLUMN `provisioned` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(458,'create entity_events table',replace('CREATE TABLE IF NOT EXISTS `entity_event` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `entity_id` TEXT NOT NULL\n, `event_type` TEXT NOT NULL\n, `created` INTEGER NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(459,'create dashboard public config v1',replace('CREATE TABLE IF NOT EXISTS `dashboard_public_config` (\n`uid` TEXT PRIMARY KEY NOT NULL\n, `dashboard_uid` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `time_settings` TEXT NOT NULL\n, `refresh_rate` INTEGER NOT NULL DEFAULT 30\n, `template_variables` TEXT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(460,'drop index UQE_dashboard_public_config_uid - v1','DROP INDEX `UQE_dashboard_public_config_uid`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(461,'drop index IDX_dashboard_public_config_org_id_dashboard_uid - v1','DROP INDEX `IDX_dashboard_public_config_org_id_dashboard_uid`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(462,'Drop old dashboard public config table','DROP TABLE IF EXISTS `dashboard_public_config`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(463,'recreate dashboard public config v1',replace('CREATE TABLE IF NOT EXISTS `dashboard_public_config` (\n`uid` TEXT PRIMARY KEY NOT NULL\n, `dashboard_uid` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `time_settings` TEXT NOT NULL\n, `refresh_rate` INTEGER NOT NULL DEFAULT 30\n, `template_variables` TEXT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(464,'create index UQE_dashboard_public_config_uid - v1','CREATE UNIQUE INDEX `UQE_dashboard_public_config_uid` ON `dashboard_public_config` (`uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(465,'create index IDX_dashboard_public_config_org_id_dashboard_uid - v1','CREATE INDEX `IDX_dashboard_public_config_org_id_dashboard_uid` ON `dashboard_public_config` (`org_id`,`dashboard_uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(466,'drop index UQE_dashboard_public_config_uid - v2','DROP INDEX `UQE_dashboard_public_config_uid`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(467,'drop index IDX_dashboard_public_config_org_id_dashboard_uid - v2','DROP INDEX `IDX_dashboard_public_config_org_id_dashboard_uid`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(468,'Drop public config table','DROP TABLE IF EXISTS `dashboard_public_config`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(469,'Recreate dashboard public config v2',replace('CREATE TABLE IF NOT EXISTS `dashboard_public_config` (\n`uid` TEXT PRIMARY KEY NOT NULL\n, `dashboard_uid` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `time_settings` TEXT NULL\n, `template_variables` TEXT NULL\n, `access_token` TEXT NOT NULL\n, `created_by` INTEGER NOT NULL\n, `updated_by` INTEGER NULL\n, `created_at` DATETIME NOT NULL\n, `updated_at` DATETIME NULL\n, `is_enabled` INTEGER NOT NULL DEFAULT 0\n);','\n',char(10)),1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(470,'create index UQE_dashboard_public_config_uid - v2','CREATE UNIQUE INDEX `UQE_dashboard_public_config_uid` ON `dashboard_public_config` (`uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(471,'create index IDX_dashboard_public_config_org_id_dashboard_uid - v2','CREATE INDEX `IDX_dashboard_public_config_org_id_dashboard_uid` ON `dashboard_public_config` (`org_id`,`dashboard_uid`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(472,'create index UQE_dashboard_public_config_access_token - v2','CREATE UNIQUE INDEX `UQE_dashboard_public_config_access_token` ON `dashboard_public_config` (`access_token`);',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(473,'Rename table dashboard_public_config to dashboard_public - v2','ALTER TABLE `dashboard_public_config` RENAME TO `dashboard_public`',1,'','2024-02-07 21:34:38');
INSERT INTO migration_log VALUES(474,'add annotations_enabled column','alter table `dashboard_public` ADD COLUMN `annotations_enabled` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(475,'add time_selection_enabled column','alter table `dashboard_public` ADD COLUMN `time_selection_enabled` INTEGER NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(476,'delete orphaned public dashboards','DELETE FROM dashboard_public WHERE dashboard_uid NOT IN (SELECT uid FROM dashboard)',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(477,'add share column','alter table `dashboard_public` ADD COLUMN `share` TEXT NOT NULL DEFAULT ''public'' ',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(478,'backfill empty share column fields with default of public','UPDATE dashboard_public SET share=''public'' WHERE share=''''',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(479,'create file table',replace('CREATE TABLE IF NOT EXISTS `file` (\n`path` TEXT NOT NULL\n, `path_hash` TEXT NOT NULL\n, `parent_folder_path_hash` TEXT NOT NULL\n, `contents` BLOB NOT NULL\n, `etag` TEXT NOT NULL\n, `cache_control` TEXT NOT NULL\n, `content_disposition` TEXT NOT NULL\n, `updated` DATETIME NOT NULL\n, `created` DATETIME NOT NULL\n, `size` INTEGER NOT NULL\n, `mime_type` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(480,'file table idx: path natural pk','CREATE UNIQUE INDEX `UQE_file_path_hash` ON `file` (`path_hash`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(481,'file table idx: parent_folder_path_hash fast folder retrieval','CREATE INDEX `IDX_file_parent_folder_path_hash` ON `file` (`parent_folder_path_hash`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(482,'create file_meta table',replace('CREATE TABLE IF NOT EXISTS `file_meta` (\n`path_hash` TEXT NOT NULL\n, `key` TEXT NOT NULL\n, `value` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(483,'file table idx: path key','CREATE UNIQUE INDEX `UQE_file_meta_path_hash_key` ON `file_meta` (`path_hash`,`key`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(484,'set path collation in file table','SELECT 0;',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(485,'migrate contents column to mediumblob for MySQL','SELECT 0;',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(486,'managed permissions migration','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(487,'managed folder permissions alert actions migration','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(488,'RBAC action name migrator','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(489,'Add UID column to playlist','alter table `playlist` ADD COLUMN `uid` TEXT NOT NULL DEFAULT 0 ',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(490,'Update uid column values in playlist','UPDATE playlist SET uid=printf(''%d'',id);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(491,'Add index for uid in playlist','CREATE UNIQUE INDEX `UQE_playlist_org_id_uid` ON `playlist` (`org_id`,`uid`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(492,'update group index for alert rules','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(493,'managed folder permissions alert actions repeated migration','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(494,'admin only folder/dashboard permission','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(495,'add action column to seed_assignment','alter table `seed_assignment` ADD COLUMN `action` TEXT NULL ',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(496,'add scope column to seed_assignment','alter table `seed_assignment` ADD COLUMN `scope` TEXT NULL ',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(497,'remove unique index builtin_role_role_name before nullable update','DROP INDEX `UQE_seed_assignment_builtin_role_role_name`',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(498,'update seed_assignment role_name column to nullable',replace('ALTER TABLE seed_assignment ADD COLUMN tmp_role_name VARCHAR(190) DEFAULT NULL;\nUPDATE seed_assignment SET tmp_role_name = role_name;\nALTER TABLE seed_assignment DROP COLUMN role_name;\nALTER TABLE seed_assignment RENAME COLUMN tmp_role_name TO role_name;','\n',char(10)),1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(499,'add unique index builtin_role_name back','CREATE UNIQUE INDEX `UQE_seed_assignment_builtin_role_role_name` ON `seed_assignment` (`builtin_role`,`role_name`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(500,'add unique index builtin_role_action_scope','CREATE UNIQUE INDEX `UQE_seed_assignment_builtin_role_action_scope` ON `seed_assignment` (`builtin_role`,`action`,`scope`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(501,'add primary key to seed_assigment','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(502,'managed folder permissions alert actions repeated fixed migration','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(503,'managed folder permissions library panel actions migration','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(504,'migrate external alertmanagers to datsourcse','migrate external alertmanagers to datasource',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(505,'create folder table',replace('CREATE TABLE IF NOT EXISTS `folder` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `uid` TEXT NOT NULL\n, `org_id` INTEGER NOT NULL\n, `title` TEXT NOT NULL\n, `description` TEXT NULL\n, `parent_uid` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(506,'Add index for parent_uid','CREATE INDEX `IDX_folder_parent_uid_org_id` ON `folder` (`parent_uid`,`org_id`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(507,'Add unique index for folder.uid and folder.org_id','CREATE UNIQUE INDEX `UQE_folder_uid_org_id` ON `folder` (`uid`,`org_id`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(508,'Update folder title length','-- NOT REQUIRED',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(509,'Add unique index for folder.title and folder.parent_uid','CREATE UNIQUE INDEX `UQE_folder_title_parent_uid` ON `folder` (`title`,`parent_uid`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(510,'Remove unique index for folder.title and folder.parent_uid','DROP INDEX `UQE_folder_title_parent_uid`',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(511,'Add unique index for title, parent_uid, and org_id','CREATE UNIQUE INDEX `UQE_folder_title_parent_uid_org_id` ON `folder` (`title`,`parent_uid`,`org_id`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(512,'Sync dashboard and folder table',replace('\n			INSERT INTO folder (uid, org_id, title, created, updated)\n			SELECT uid, org_id, title, created, updated FROM dashboard WHERE is_folder = 1\n			ON CONFLICT DO UPDATE SET title=excluded.title, updated=excluded.updated\n		','\n',char(10)),1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(513,'Remove ghost folders from the folder table',replace('\n			DELETE FROM folder WHERE NOT EXISTS\n				(SELECT 1 FROM dashboard WHERE dashboard.uid = folder.uid AND dashboard.org_id = folder.org_id AND dashboard.is_folder = true)\n	','\n',char(10)),1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(514,'create anon_device table',replace('CREATE TABLE IF NOT EXISTS `anon_device` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `client_ip` TEXT NOT NULL\n, `created_at` DATETIME NOT NULL\n, `device_id` TEXT NOT NULL\n, `updated_at` DATETIME NOT NULL\n, `user_agent` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(515,'add unique index anon_device.device_id','CREATE UNIQUE INDEX `UQE_anon_device_device_id` ON `anon_device` (`device_id`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(516,'add index anon_device.updated_at','CREATE INDEX `IDX_anon_device_updated_at` ON `anon_device` (`updated_at`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(517,'create signing_key table',replace('CREATE TABLE IF NOT EXISTS `signing_key` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `key_id` TEXT NOT NULL\n, `private_key` TEXT NOT NULL\n, `added_at` DATETIME NOT NULL\n, `expires_at` DATETIME NULL\n, `alg` TEXT NOT NULL\n);','\n',char(10)),1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(518,'add unique index signing_key.key_id','CREATE UNIQUE INDEX `UQE_signing_key_key_id` ON `signing_key` (`key_id`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(519,'set legacy alert migration status in kvstore','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(520,'migrate record of created folders during legacy migration to kvstore','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(521,'Add folder_uid for dashboard','alter table `dashboard` ADD COLUMN `folder_uid` TEXT NULL ',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(522,'Populate dashboard folder_uid column','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(523,'Add unique index for dashboard_org_id_folder_uid_title','CREATE UNIQUE INDEX `UQE_dashboard_org_id_folder_uid_title` ON `dashboard` (`org_id`,`folder_uid`,`title`);',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(524,'create sso_setting table',replace('CREATE TABLE IF NOT EXISTS `sso_setting` (\n`id` TEXT PRIMARY KEY NOT NULL\n, `provider` TEXT NOT NULL\n, `settings` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n, `is_deleted` INTEGER NOT NULL DEFAULT 0\n);','\n',char(10)),1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(525,'copy kvstore migration status to each org','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(526,'add back entry for orgid=0 migrated status','code migration',1,'','2024-02-07 21:34:39');
INSERT INTO migration_log VALUES(527,'Add uid column to user','alter table `user` ADD COLUMN `uid` TEXT NULL ',1,'','2024-03-11 13:20:26');
INSERT INTO migration_log VALUES(528,'Update uid column values for users','UPDATE user SET uid=printf(''u%09d'',id) WHERE uid IS NULL;',1,'','2024-03-11 13:20:26');
INSERT INTO migration_log VALUES(529,'Add unique index user_uid','CREATE UNIQUE INDEX `UQE_user_uid` ON `user` (`uid`);',1,'','2024-03-11 13:20:26');
INSERT INTO migration_log VALUES(530,'add permission action scope role_id index','CREATE UNIQUE INDEX `UQE_permission_action_scope_role_id` ON `permission` (`action`,`scope`,`role_id`);',1,'','2024-03-11 13:20:26');
INSERT INTO migration_log VALUES(531,'remove permission role_id action scope index','DROP INDEX `UQE_permission_role_id_action_scope`',1,'','2024-03-11 13:20:26');
INSERT INTO migration_log VALUES(532,'add origin column to seed_assignment','alter table `seed_assignment` ADD COLUMN `origin` TEXT NULL ',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(533,'add origin to plugin seed_assignment','code migration',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(534,'prevent seeding OnCall access','code migration',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(535,'Remove unique index UQE_folder_uid_org_id','DROP INDEX `UQE_folder_uid_org_id`',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(536,'Add unique index UQE_folder_org_id_uid','CREATE UNIQUE INDEX `UQE_folder_org_id_uid` ON `folder` (`org_id`,`uid`);',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(537,'Remove unique index UQE_folder_title_parent_uid_org_id','DROP INDEX `UQE_folder_title_parent_uid_org_id`',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(538,'Add unique index UQE_folder_org_id_parent_uid_title','CREATE UNIQUE INDEX `UQE_folder_org_id_parent_uid_title` ON `folder` (`org_id`,`parent_uid`,`title`);',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(539,'Remove index IDX_folder_parent_uid_org_id','DROP INDEX `IDX_folder_parent_uid_org_id`',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(540,'Delete unique index for dashboard_org_id_folder_id_title','DROP INDEX `UQE_dashboard_org_id_folder_id_title`',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(541,'Delete unique index for dashboard_org_id_folder_uid_title','DROP INDEX `UQE_dashboard_org_id_folder_uid_title`',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(542,'Add unique index for dashboard_org_id_folder_uid_title_is_folder','CREATE UNIQUE INDEX `UQE_dashboard_org_id_folder_uid_title_is_folder` ON `dashboard` (`org_id`,`folder_uid`,`title`,`is_folder`);',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(543,'Restore index for dashboard_org_id_folder_id_title','CREATE INDEX `IDX_dashboard_org_id_folder_id_title` ON `dashboard` (`org_id`,`folder_id`,`title`);',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(544,'alter kv_store.value to longtext','SELECT 0;',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(545,'add notification_settings column to alert_rule table','alter table `alert_rule` ADD COLUMN `notification_settings` TEXT NULL ',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(546,'add notification_settings column to alert_rule_version table','alter table `alert_rule_version` ADD COLUMN `notification_settings` TEXT NULL ',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(547,'removing scope from alert.instances:read action migration','code migration',1,'','2024-03-11 13:20:27');
INSERT INTO migration_log VALUES(548,'update login field with orgid to allow for multiple service accounts with same name across orgs','code migration',1,'','2024-03-26 22:27:07');
INSERT INTO migration_log VALUES(549,'update login and email fields to lowercase','code migration',1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(550,'add library_element folder uid','alter table `library_element` ADD COLUMN `folder_uid` TEXT NULL ',1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(551,'populate library_element folder_uid',replace('UPDATE library_element\n	SET folder_uid = dashboard.uid\n	FROM dashboard\n	WHERE library_element.folder_id = dashboard.id AND library_element.org_id = dashboard.org_id','\n',char(10)),1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(552,'add index library_element org_id-folder_uid-name-kind','CREATE UNIQUE INDEX `UQE_library_element_org_id_folder_uid_name_kind` ON `library_element` (`org_id`,`folder_uid`,`name`,`kind`);',1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(553,'managed dashboard permissions annotation actions migration','code migration',1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(554,'create cloud_migration table v1',replace('CREATE TABLE IF NOT EXISTS `cloud_migration` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `auth_token` TEXT NULL\n, `stack` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n);','\n',char(10)),1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(555,'create cloud_migration_run table v1',replace('CREATE TABLE IF NOT EXISTS `cloud_migration_run` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `cloud_migration_uid` TEXT NULL\n, `result` TEXT NOT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n, `finished` DATETIME NULL\n);','\n',char(10)),1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(556,'add stack_id column','alter table `cloud_migration` ADD COLUMN `stack_id` INTEGER NOT NULL ',1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(557,'add region_slug column','alter table `cloud_migration` ADD COLUMN `region_slug` TEXT NOT NULL ',1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(558,'add cluster_slug column','alter table `cloud_migration` ADD COLUMN `cluster_slug` TEXT NOT NULL ',1,'','2024-06-02 20:34:53');
INSERT INTO migration_log VALUES(559,'update login and email fields to lowercase2','code migration',1,'','2024-06-29 04:14:41');
CREATE TABLE `user` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `version` INTEGER NOT NULL
, `login` TEXT NOT NULL
, `email` TEXT NOT NULL
, `name` TEXT NULL
, `password` TEXT NULL
, `salt` TEXT NULL
, `rands` TEXT NULL
, `company` TEXT NULL
, `org_id` INTEGER NOT NULL
, `is_admin` INTEGER NOT NULL
, `email_verified` INTEGER NULL
, `theme` TEXT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `help_flags1` INTEGER NOT NULL DEFAULT 0, `last_seen_at` DATETIME NULL, `is_disabled` INTEGER NOT NULL DEFAULT 0, is_service_account BOOLEAN DEFAULT 0, `uid` TEXT NULL);
INSERT INTO user VALUES(1,0,'admin','admin@localhost','','55b41bf63832cdf335d884dbde6cd77631d7fe084767cd7a06d462ebf5db769f2207efe457b1712d0d319d27006a4d7d0c17','bDE3GbYRps','P7FqcmJhyo','',1,1,0,'','2024-02-07 21:34:39','2024-02-07 21:34:39',0,'2024-07-07 20:41:41',0,0,'u000000001');
CREATE TABLE `temp_user` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `version` INTEGER NOT NULL
, `email` TEXT NOT NULL
, `name` TEXT NULL
, `role` TEXT NULL
, `code` TEXT NOT NULL
, `status` TEXT NOT NULL
, `invited_by_user_id` INTEGER NULL
, `email_sent` INTEGER NOT NULL
, `email_sent_on` DATETIME NULL
, `remote_addr` TEXT NULL
, `created` INTEGER NOT NULL DEFAULT 0
, `updated` INTEGER NOT NULL DEFAULT 0
);
CREATE TABLE `star` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `user_id` INTEGER NOT NULL
, `dashboard_id` INTEGER NOT NULL
);
INSERT INTO star VALUES(3,1,7);
INSERT INTO star VALUES(4,1,4);
CREATE TABLE `org` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `version` INTEGER NOT NULL
, `name` TEXT NOT NULL
, `address1` TEXT NULL
, `address2` TEXT NULL
, `city` TEXT NULL
, `state` TEXT NULL
, `zip_code` TEXT NULL
, `country` TEXT NULL
, `billing_email` TEXT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
);
INSERT INTO org VALUES(1,0,'Main Org.','','','','','','',NULL,'2024-02-07 21:34:39','2024-02-07 21:34:39');
CREATE TABLE `org_user` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `user_id` INTEGER NOT NULL
, `role` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
);
INSERT INTO org_user VALUES(1,1,1,'Admin','2024-02-07 21:34:39','2024-02-07 21:34:39');
CREATE TABLE `dashboard_tag` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `dashboard_id` INTEGER NOT NULL
, `term` TEXT NOT NULL
);
CREATE TABLE `dashboard` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `version` INTEGER NOT NULL
, `slug` TEXT NOT NULL
, `title` TEXT NOT NULL
, `data` TEXT NOT NULL
, `org_id` INTEGER NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `updated_by` INTEGER NULL, `created_by` INTEGER NULL, `gnet_id` INTEGER NULL, `plugin_id` TEXT NULL, `folder_id` INTEGER NOT NULL DEFAULT 0, `is_folder` INTEGER NOT NULL DEFAULT 0, `has_acl` INTEGER NOT NULL DEFAULT 0, `uid` TEXT NULL, `is_public` INTEGER NOT NULL DEFAULT 0, `folder_uid` TEXT NULL);
INSERT INTO dashboard VALUES(4,88,'active-session-history','Active Session History',X'',1,'2024-03-28 16:21:47','2024-07-07 20:42:48',1,1,0,'',0,0,0,'cdh1ginpqkwlcc',0,NULL);
INSERT INTO dashboard VALUES(7,5,'home','Home',X'7b22616e6e6f746174696f6e73223a7b226c697374223a5b7b226275696c74496e223a312c2264617461736f75726365223a7b2274797065223a2267726166616e61222c22756964223a222d2d2047726166616e61202d2d227d2c22656e61626c65223a747275652c2268696465223a747275652c2269636f6e436f6c6f72223a227267626128302c203231312c203235352c203129222c226e616d65223a22416e6e6f746174696f6e73205c753030323620416c65727473222c2274797065223a2264617368626f617264227d5d7d2c226564697461626c65223a747275652c2266697363616c5965617253746172744d6f6e7468223a302c226772617068546f6f6c746970223a302c226964223a372c226c696e6b73223a5b7b22617344726f70646f776e223a66616c73652c2269636f6e223a22636c6f7564222c22696e636c75646556617273223a66616c73652c226b65657054696d65223a66616c73652c2274616773223a5b5d2c22746172676574426c616e6b223a66616c73652c227469746c65223a224461746120536f7572636573222c22746f6f6c746970223a224461746120536f7572636573222c2274797065223a226c696e6b222c2275726c223a222f636f6e6e656374696f6e732f64617461736f7572636573227d2c7b22617344726f70646f776e223a66616c73652c2269636f6e223a2265787465726e616c206c696e6b222c22696e636c75646556617273223a66616c73652c226b65657054696d65223a66616c73652c2274616773223a5b5d2c22746172676574426c616e6b223a66616c73652c227469746c65223a2244617368626f617264222c22746f6f6c746970223a22222c2274797065223a2264617368626f61726473222c2275726c223a22227d5d2c2270616e656c73223a5b7b2264617461736f75726365223a7b2274797065223a222067726166616e612d79756761627974652d64617461736f75726365222c22756964223a22247b64617461736f757263657d227d2c2267726964506f73223a7b2268223a31352c2277223a32342c2278223a302c2279223a307d2c226964223a312c226c696e6b73223a5b7b22746172676574426c616e6b223a747275652c227469746c65223a22476974487562207265706f222c2275726c223a2268747470733a2f2f6769746875622e636f6d2f4672616e636b506163686f742f79622d706572662d687562227d5d2c226f7074696f6e73223a7b22636f6465223a7b226c616e6775616765223a22706c61696e74657874222c2273686f774c696e654e756d62657273223a66616c73652c2273686f774d696e694d6170223a66616c73657d2c22636f6e74656e74223a225c6e232057656c636f6d6520746f20746865204163746976652053657373696f6e20486973746f727920666f7220597567616279746544425c6e5c6ef09fa7aa205468697320697320616e206578706572696d656e74616c2064617368626f61726420666f722059756761627974654442204163746976652053657373696f6e20486973746f72795c6e5c6ee29aa0efb88f206974206372656174657320736f6d6520466f726569676e20446174612057726170706572206f626a6563747320746f20636f6e6e65637420746f20746865206f74686572206e6f646573206f662074686520636c75737465725c6e5c6e232320446174616261736520636f6e66696775726174696f6e5c6e5c6e596f75206d75737420656e61626c652041534820776974682074686520666f6c6c6f77696e6720666c6167733a5c6e6060605c6e2d2d616c6c6f7765645f707265766965775f666c6167735f6373763d7973716c5f79625f6173685f656e61626c655f696e6672612c7973716c5f79625f656e61626c655f6173685c6e2d2d7973716c5f79625f6173685f656e61626c655f696e6672613d747275655c6e2d2d7973716c5f79625f656e61626c655f6173683d747275655c6e6060605c6e5c6e232320312e20446174616261736520636f6e6e656374696f6e5c6e5c6e596f75206d75737420636f6e6669677572652074686520506f737467726553514c204461746120536f757263653a5c6e5b4461746120536f75726365735d282f636f6e6e656374696f6e732f64617461736f7572636573295c6e5c6e596f75206e65656420746f20636f6e6e65637420746f206f6e6c79206f6e65206e6f64652e205768656e20656e746572696e67207468652064617368626f6172642c2069742077696c6c206175746f6d61746963616c6c79206372656174652074686520466f726569676e20446174612057726170706572206f626a6563747320746f20717565727920616c6c206e6f6465735c6e5c6e232320322e20476f20746f207468652064617368626f6172645c6e5c6e5768656e20796f75206b6e6f772074686174207468652064656661756c7420636f6e6e656374696f6e20697320617661696c61626c652c20796f752063616e20676f20746f20746865205b4163746976652053657373696f6e20486973746f72795d282f642f6364683167696e70716b776c63632f6163746976652d73657373696f6e2d686973746f7279292044617368626f6172645c6e5c6e596f752063616e2073656c6563742074686520636f6e6e656374696f6e2c20697420646973706c617973207468652059756761627974654442205461626c657420536572766572206e6f64657320616e6420746865204163746976652053657373696f6e20486973746f727920636f6d706f6e656e74735c6e5c6e222c226d6f6465223a226d61726b646f776e227d2c22706c7567696e56657273696f6e223a2231312e302e31222c227469746c65223a2268747470733a2f2f6769746875622e636f6d2f4672616e636b506163686f742f79622d706572662d687562222c227472616e73706172656e74223a747275652c2274797065223a2274657874227d5d2c22736368656d6156657273696f6e223a33392c2274616773223a5b5d2c2274656d706c6174696e67223a7b226c697374223a5b5d7d2c2274696d65223a7b2266726f6d223a226e6f772d3668222c22746f223a226e6f77227d2c2274696d6552616e676555706461746564447572696e67456469744f7256696577223a66616c73652c2274696d657069636b6572223a7b2268696464656e223a747275657d2c2274696d657a6f6e65223a2262726f77736572222c227469746c65223a22486f6d65222c22756964223a22666471727069706f71366d383066222c2276657273696f6e223a352c227765656b5374617274223a22227d',1,'2024-07-04 20:09:45','2024-07-04 21:18:54',1,1,0,'',0,0,0,'fdqrpipoq6m80f',0,NULL);
CREATE TABLE `dashboard_provisioning` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `dashboard_id` INTEGER NULL
, `name` TEXT NOT NULL
, `external_id` TEXT NOT NULL
, `updated` INTEGER NOT NULL DEFAULT 0
, `check_sum` TEXT NULL);
CREATE TABLE `data_source` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `version` INTEGER NOT NULL
, `type` TEXT NOT NULL
, `name` TEXT NOT NULL
, `access` TEXT NOT NULL
, `url` TEXT NOT NULL
, `password` TEXT NULL
, `user` TEXT NULL
, `database` TEXT NULL
, `basic_auth` INTEGER NOT NULL
, `basic_auth_user` TEXT NULL
, `basic_auth_password` TEXT NULL
, `is_default` INTEGER NOT NULL
, `json_data` TEXT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `with_credentials` INTEGER NOT NULL DEFAULT 0, `secure_json_data` TEXT NULL, `read_only` INTEGER NULL, `uid` TEXT NOT NULL DEFAULT 0);
INSERT INTO data_source VALUES(6,1,23,'grafana-postgresql-datasource','YugabyteDB','proxy','yb:5433','','yugabyte','',0,'','',0,X'7b22636f6e6e4d61784c69666574696d65223a31343430302c226461746162617365223a227975676162797465222c226d617849646c65436f6e6e73223a312c226d617849646c65436f6e6e734175746f223a747275652c226d61784f70656e436f6e6e73223a312c22706f73746772657356657273696f6e223a313130302c2273736c6d6f6465223a2264697361626c65227d','2024-07-04 20:51:25','2024-07-07 18:00:20',0,'{"password":"I1lXUnlNakp5TVhOa05YRXdkMlUjKllXVnpMV05tWWcqM1hOd2RqRW+zFK1St/0K3Cw31uxKhxOkCrUxzDGmYDQ="}',0,'bdqrt8jw728sgb');
CREATE TABLE `api_key` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `name` TEXT NOT NULL
, `key` TEXT NOT NULL
, `role` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `expires` INTEGER NULL, `service_account_id` INTEGER NULL, `last_used_at` DATETIME NULL, `is_revoked` INTEGER NULL DEFAULT 0);
CREATE TABLE `dashboard_snapshot` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `name` TEXT NOT NULL
, `key` TEXT NOT NULL
, `delete_key` TEXT NOT NULL
, `org_id` INTEGER NOT NULL
, `user_id` INTEGER NOT NULL
, `external` INTEGER NOT NULL
, `external_url` TEXT NOT NULL
, `dashboard` TEXT NOT NULL
, `expires` DATETIME NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `external_delete_url` TEXT NULL, `dashboard_encrypted` BLOB NULL);
CREATE TABLE `quota` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NULL
, `user_id` INTEGER NULL
, `target` TEXT NOT NULL
, `limit` INTEGER NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
);
CREATE TABLE `plugin_setting` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NULL
, `plugin_id` TEXT NOT NULL
, `enabled` INTEGER NOT NULL
, `pinned` INTEGER NOT NULL
, `json_data` TEXT NULL
, `secure_json_data` TEXT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `plugin_version` TEXT NULL);
CREATE TABLE `session` (
`key` TEXT PRIMARY KEY NOT NULL
, `data` BLOB NOT NULL
, `expiry` INTEGER NOT NULL
);
CREATE TABLE `playlist` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `name` TEXT NOT NULL
, `interval` TEXT NOT NULL
, `org_id` INTEGER NOT NULL
, `created_at` INTEGER NOT NULL DEFAULT 0, `updated_at` INTEGER NOT NULL DEFAULT 0, `uid` TEXT NOT NULL DEFAULT 0);
CREATE TABLE `playlist_item` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `playlist_id` INTEGER NOT NULL
, `type` TEXT NOT NULL
, `value` TEXT NOT NULL
, `title` TEXT NOT NULL
, `order` INTEGER NOT NULL
);
CREATE TABLE `preferences` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `user_id` INTEGER NOT NULL
, `version` INTEGER NOT NULL
, `home_dashboard_id` INTEGER NOT NULL
, `timezone` TEXT NOT NULL
, `theme` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `team_id` INTEGER NULL, `week_start` TEXT NULL, `json_data` TEXT NULL);
INSERT INTO preferences VALUES(1,1,0,3,7,'','','2024-02-07 23:41:48','2024-07-04 20:15:51',0,'',X'7b226c616e6775616765223a22222c227175657279486973746f7279223a7b22686f6d65546162223a22227d2c22636f6f6b6965507265666572656e636573223a6e756c6c7d');
INSERT INTO preferences VALUES(2,1,1,1,0,'','dark','2024-07-04 17:21:33','2024-07-04 17:32:54',0,'',X'7b226c616e6775616765223a22222c227175657279486973746f7279223a7b22686f6d65546162223a22227d2c22636f6f6b6965507265666572656e636573223a6e756c6c7d');
CREATE TABLE `alert` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `version` INTEGER NOT NULL
, `dashboard_id` INTEGER NOT NULL
, `panel_id` INTEGER NOT NULL
, `org_id` INTEGER NOT NULL
, `name` TEXT NOT NULL
, `message` TEXT NOT NULL
, `state` TEXT NOT NULL
, `settings` TEXT NOT NULL
, `frequency` INTEGER NOT NULL
, `handler` INTEGER NOT NULL
, `severity` TEXT NOT NULL
, `silenced` INTEGER NOT NULL
, `execution_error` TEXT NOT NULL
, `eval_data` TEXT NULL
, `eval_date` DATETIME NULL
, `new_state_date` DATETIME NOT NULL
, `state_changes` INTEGER NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `for` INTEGER NULL);
CREATE TABLE `alert_rule_tag` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `alert_id` INTEGER NOT NULL
, `tag_id` INTEGER NOT NULL
);
CREATE TABLE `alert_notification` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `name` TEXT NOT NULL
, `type` TEXT NOT NULL
, `settings` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `is_default` INTEGER NOT NULL DEFAULT 0, `frequency` INTEGER NULL, `send_reminder` INTEGER NULL DEFAULT 0, `disable_resolve_message` INTEGER NOT NULL DEFAULT 0, `uid` TEXT NULL, `secure_settings` TEXT NULL);
CREATE TABLE `alert_notification_state` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `alert_id` INTEGER NOT NULL
, `notifier_id` INTEGER NOT NULL
, `state` TEXT NOT NULL
, `version` INTEGER NOT NULL
, `updated_at` INTEGER NOT NULL
, `alert_rule_state_updated_version` INTEGER NOT NULL
);
CREATE TABLE `annotation` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `alert_id` INTEGER NULL
, `user_id` INTEGER NULL
, `dashboard_id` INTEGER NULL
, `panel_id` INTEGER NULL
, `category_id` INTEGER NULL
, `type` TEXT NOT NULL
, `title` TEXT NOT NULL
, `text` TEXT NOT NULL
, `metric` TEXT NULL
, `prev_state` TEXT NOT NULL
, `new_state` TEXT NOT NULL
, `data` TEXT NOT NULL
, `epoch` INTEGER NOT NULL
, `region_id` INTEGER NULL DEFAULT 0, `tags` TEXT NULL, `created` INTEGER NULL DEFAULT 0, `updated` INTEGER NULL DEFAULT 0, `epoch_end` INTEGER NOT NULL DEFAULT 0);
CREATE TABLE `annotation_tag` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `annotation_id` INTEGER NOT NULL
, `tag_id` INTEGER NOT NULL
);
CREATE TABLE `test_data` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `metric1` TEXT NULL
, `metric2` TEXT NULL
, `value_big_int` INTEGER NULL
, `value_double` REAL NULL
, `value_float` REAL NULL
, `value_int` INTEGER NULL
, `time_epoch` INTEGER NOT NULL
, `time_date_time` DATETIME NOT NULL
, `time_time_stamp` DATETIME NOT NULL
);
CREATE TABLE `dashboard_version` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `dashboard_id` INTEGER NOT NULL
, `parent_version` INTEGER NOT NULL
, `restored_from` INTEGER NOT NULL
, `version` INTEGER NOT NULL
, `created` DATETIME NOT NULL
, `created_by` INTEGER NOT NULL
, `message` TEXT NOT NULL
, `data` TEXT NOT NULL
);
INSERT INTO dashboard_version VALUES(218,7,0,0,1,'2024-07-04 20:09:45',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":null,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"New link","tooltip":"Setup Datasources","type":"link","url":"/connections/datasources"}],"panels":[],"schemaVersion":39,"tags":[],"templating":{"list":[]},"time":{"from":"now-6h","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"hidden":true},"timezone":"browser","title":"Home","uid":"fdqrpipoq6m80f","version":1,"weekStart":""}');
INSERT INTO dashboard_version VALUES(226,7,1,0,2,'2024-07-04 20:59:02',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":7,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Dashboard","tooltip":"","type":"dashboards","url":""}],"panels":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"gridPos":{"h":10,"w":12,"x":0,"y":0},"id":1,"links":[{"title":"Data Sources","url":"/connections/datasources"}],"options":{"code":{"language":"plaintext","showLineNumbers":false,"showMiniMap":false},"content":"\n# Active Session History for YugabyteDB\n\nYou must enable the following:\n```\n--allowed_preview_flags_csv=enable_ysql_conn_mgr,ysql_yb_ash_enable_infra,ysql_yb_enable_ash\n--ysql_yb_ash_enable_infra=true\n--ysql_yb_enable_ash=true\n```\n\nThere are two views below:\n- Statements: based on query_id\n- Wait events: separated by node","mode":"markdown"},"pluginVersion":"11.0.1","title":"👆 Select a YugabyteDB datasource that you have defined in Data Sources:","type":"text"}],"schemaVersion":39,"tags":[],"templating":{"list":[]},"time":{"from":"now-6h","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"hidden":true},"timezone":"browser","title":"Home","uid":"fdqrpipoq6m80f","version":2,"weekStart":""}');
INSERT INTO dashboard_version VALUES(228,7,2,0,3,'2024-07-04 21:15:35',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":7,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Dashboard","tooltip":"","type":"dashboards","url":""}],"panels":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"gridPos":{"h":15,"w":24,"x":0,"y":0},"id":1,"links":[{"targetBlank":true,"title":"GitHub repo","url":"https://github.com/FranckPachot/yb-perf-hub"}],"options":{"code":{"language":"plaintext","showLineNumbers":false,"showMiniMap":false},"content":"\n# Welcome to the Active Session History for YugabyteDB\n\n🧪 This is an experimental dashboard for YugabyteDB Active Session History\n\n⚠️ it creates some Foreign Data Wrapper objects to connect to the other nodes of the cluster\n\n## Database configuration\n\nYou must enable ASH with the following flags:\n```\n--allowed_preview_flags_csv=ysql_yb_ash_enable_infra,ysql_yb_enable_ash\n--ysql_yb_ash_enable_infra=true\n--ysql_yb_enable_ash=true\n```\n\n## Database connection\n\nYou must configure the PostgreSQL Data Source:\n[Data Sources](/connections/datasources)\n\nYou need to connect to only one node. When entering the dashboard, it will automatically create the Foreign Data Wrapper objects to query all nodes\n\n## Go to the dashboard\n\nWhen you know that the default connection is available, you can go to the Active Session History [Dashboard](d/cdh1ginpqkwlcc/active-session-history)\n\nYou can select the connection, it displays the YugabyteDB Tablet Server nodes and the Active Session History components\n\n","mode":"markdown"},"pluginVersion":"11.0.1","title":"https://github.com/FranckPachot/yb-perf-hub","transparent":true,"type":"text"}],"schemaVersion":39,"tags":[],"templating":{"list":[]},"time":{"from":"now-6h","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"hidden":true},"timezone":"browser","title":"Home","uid":"fdqrpipoq6m80f","version":3,"weekStart":""}');
INSERT INTO dashboard_version VALUES(229,7,3,0,4,'2024-07-04 21:16:25',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":7,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Dashboard","tooltip":"","type":"dashboards","url":""}],"panels":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"gridPos":{"h":15,"w":24,"x":0,"y":0},"id":1,"links":[{"targetBlank":true,"title":"GitHub repo","url":"https://github.com/FranckPachot/yb-perf-hub"}],"options":{"code":{"language":"plaintext","showLineNumbers":false,"showMiniMap":false},"content":"\n# Welcome to the Active Session History for YugabyteDB\n\n🧪 This is an experimental dashboard for YugabyteDB Active Session History\n\n⚠️ it creates some Foreign Data Wrapper objects to connect to the other nodes of the cluster\n\n## Database configuration\n\nYou must enable ASH with the following flags:\n```\n--allowed_preview_flags_csv=ysql_yb_ash_enable_infra,ysql_yb_enable_ash\n--ysql_yb_ash_enable_infra=true\n--ysql_yb_enable_ash=true\n```\n\n## 1. Database connection\n\nYou must configure the PostgreSQL Data Source:\n[Data Sources](/connections/datasources)\n\nYou need to connect to only one node. When entering the dashboard, it will automatically create the Foreign Data Wrapper objects to query all nodes\n\n## 2. Go to the dashboard\n\nWhen you know that the default connection is available, you can go to the Active Session History [Dashboard](d/cdh1ginpqkwlcc/active-session-history)\n\nYou can select the connection, it displays the YugabyteDB Tablet Server nodes and the Active Session History components\n\n","mode":"markdown"},"pluginVersion":"11.0.1","title":"https://github.com/FranckPachot/yb-perf-hub","transparent":true,"type":"text"}],"schemaVersion":39,"tags":[],"templating":{"list":[]},"time":{"from":"now-6h","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"hidden":true},"timezone":"browser","title":"Home","uid":"fdqrpipoq6m80f","version":4,"weekStart":""}');
INSERT INTO dashboard_version VALUES(230,7,4,0,5,'2024-07-04 21:18:54',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":7,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Dashboard","tooltip":"","type":"dashboards","url":""}],"panels":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"gridPos":{"h":15,"w":24,"x":0,"y":0},"id":1,"links":[{"targetBlank":true,"title":"GitHub repo","url":"https://github.com/FranckPachot/yb-perf-hub"}],"options":{"code":{"language":"plaintext","showLineNumbers":false,"showMiniMap":false},"content":"\n# Welcome to the Active Session History for YugabyteDB\n\n🧪 This is an experimental dashboard for YugabyteDB Active Session History\n\n⚠️ it creates some Foreign Data Wrapper objects to connect to the other nodes of the cluster\n\n## Database configuration\n\nYou must enable ASH with the following flags:\n```\n--allowed_preview_flags_csv=ysql_yb_ash_enable_infra,ysql_yb_enable_ash\n--ysql_yb_ash_enable_infra=true\n--ysql_yb_enable_ash=true\n```\n\n## 1. Database connection\n\nYou must configure the PostgreSQL Data Source:\n[Data Sources](/connections/datasources)\n\nYou need to connect to only one node. When entering the dashboard, it will automatically create the Foreign Data Wrapper objects to query all nodes\n\n## 2. Go to the dashboard\n\nWhen you know that the default connection is available, you can go to the [Active Session History](/d/cdh1ginpqkwlcc/active-session-history) Dashboard\n\nYou can select the connection, it displays the YugabyteDB Tablet Server nodes and the Active Session History components\n\n","mode":"markdown"},"pluginVersion":"11.0.1","title":"https://github.com/FranckPachot/yb-perf-hub","transparent":true,"type":"text"}],"schemaVersion":39,"tags":[],"templating":{"list":[]},"time":{"from":"now-6h","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"hidden":true},"timezone":"browser","title":"Home","uid":"fdqrpipoq6m80f","version":5,"weekStart":""}');
INSERT INTO dashboard_version VALUES(251,4,65,0,66,'2024-07-05 20:16:18',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":true,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Cpu YSQLQuery:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS Postgres TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network TabletWait:ConflictResolution_ResolveConficts"},"properties":[{"id":"color","value":{"fixedColor":"light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network Consensus:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-orange","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition Common:Rpc_Done"},"properties":[{"id":"color","value":{"fixedColor":"super-light-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL IPC YSQLQuery:ExecuteGather"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition TabletWait:ConflictResolution_WaitOnConflictingTxns"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-red","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":2},"id":3,"options":{"legend":{"calcs":["lastNotNull"],"displayMode":"list","placement":"bottom","showLegend":true,"sortBy":"Name","sortDesc":false,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_type ,wait_event_class,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"}],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":3},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":4},"id":22,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":19},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":20},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":31},"id":47,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":66,"weekStart":""}');
INSERT INTO dashboard_version VALUES(252,4,66,0,67,'2024-07-05 20:23:00',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":true,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Cpu YSQLQuery:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS Postgres TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network TabletWait:ConflictResolution_ResolveConficts"},"properties":[{"id":"color","value":{"fixedColor":"light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network Consensus:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-orange","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition Common:Rpc_Done"},"properties":[{"id":"color","value":{"fixedColor":"super-light-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL IPC YSQLQuery:ExecuteGather"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition TabletWait:ConflictResolution_WaitOnConflictingTxns"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-red","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":2},"id":3,"options":{"legend":{"calcs":["lastNotNull"],"displayMode":"list","placement":"bottom","showLegend":true,"sortBy":"Name","sortDesc":false,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_type ,wait_event_class,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"}],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"collapsed":true,"gridPos":{"h":1,"w":24,"x":0,"y":3},"id":14,"panels":[{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":4},"id":22,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"}],"title":"Statements","type":"row"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":4},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":5},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Max","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":20,"w":24,"x":0,"y":38},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.4,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":64},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"single","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id, gv$host\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":67,"weekStart":""}');
INSERT INTO dashboard_version VALUES(253,4,67,0,68,'2024-07-05 20:30:44',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":true,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Cpu YSQLQuery:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS Postgres TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network TabletWait:ConflictResolution_ResolveConficts"},"properties":[{"id":"color","value":{"fixedColor":"light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network Consensus:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-orange","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition Common:Rpc_Done"},"properties":[{"id":"color","value":{"fixedColor":"super-light-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL IPC YSQLQuery:ExecuteGather"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition TabletWait:ConflictResolution_WaitOnConflictingTxns"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-red","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":2},"id":3,"options":{"legend":{"calcs":["lastNotNull"],"displayMode":"list","placement":"bottom","showLegend":true,"sortBy":"Name","sortDesc":false,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_type ,wait_event_class,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"}],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"collapsed":true,"gridPos":{"h":1,"w":24,"x":0,"y":3},"id":14,"panels":[{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":4},"id":22,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"}],"title":"Statements","type":"row"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":4},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":5},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Max","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":20,"w":24,"x":0,"y":38},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.4,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":64},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"single","showColorScale":false,"yHistogram":true},"yAxis":{"axisPlacement":"left","reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":68,"weekStart":""}');
INSERT INTO dashboard_version VALUES(254,4,68,0,69,'2024-07-05 20:34:53',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":true,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Cpu YSQLQuery:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS Postgres TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network TabletWait:ConflictResolution_ResolveConficts"},"properties":[{"id":"color","value":{"fixedColor":"light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network Consensus:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-orange","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition Common:Rpc_Done"},"properties":[{"id":"color","value":{"fixedColor":"super-light-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL IPC YSQLQuery:ExecuteGather"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition TabletWait:ConflictResolution_WaitOnConflictingTxns"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-red","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":2},"id":3,"options":{"legend":{"calcs":["lastNotNull"],"displayMode":"list","placement":"bottom","showLegend":true,"sortBy":"Name","sortDesc":false,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_type ,wait_event_class,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"}],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"collapsed":true,"gridPos":{"h":1,"w":24,"x":0,"y":3},"id":14,"panels":[{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":4},"id":22,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"}],"title":"Statements","type":"row"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":4},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":5},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Max","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":38},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.4,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":64},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"single","showColorScale":false,"yHistogram":true},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":69,"weekStart":""}');
INSERT INTO dashboard_version VALUES(255,4,69,0,70,'2024-07-05 20:37:01',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":true,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Cpu YSQLQuery:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS Postgres TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network TabletWait:ConflictResolution_ResolveConficts"},"properties":[{"id":"color","value":{"fixedColor":"light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network Consensus:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-orange","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition Common:Rpc_Done"},"properties":[{"id":"color","value":{"fixedColor":"super-light-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL IPC YSQLQuery:ExecuteGather"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition TabletWait:ConflictResolution_WaitOnConflictingTxns"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-red","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":2},"id":3,"options":{"legend":{"calcs":["lastNotNull"],"displayMode":"list","placement":"bottom","showLegend":true,"sortBy":"Name","sortDesc":false,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_type ,wait_event_class,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"}],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"collapsed":true,"gridPos":{"h":1,"w":24,"x":0,"y":3},"id":14,"panels":[{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":4},"id":22,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom","showLegend":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"}],"title":"Statements","type":"row"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":4},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":5},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Max","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":38},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.4,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":64},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":70,"weekStart":""}');
INSERT INTO dashboard_version VALUES(256,4,70,0,71,'2024-07-05 21:07:07',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Cpu YSQLQuery:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS Postgres TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network TabletWait:ConflictResolution_ResolveConficts"},"properties":[{"id":"color","value":{"fixedColor":"light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network Consensus:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-orange","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition Common:Rpc_Done"},"properties":[{"id":"color","value":{"fixedColor":"super-light-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL IPC YSQLQuery:ExecuteGather"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition TabletWait:ConflictResolution_WaitOnConflictingTxns"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-red","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Name","sortDesc":false,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_type ,wait_event_class,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":24},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[{"__systemRef":"hideSeriesFrom","matcher":{"id":"byNames","options":{"mode":"exclude","names":["  /* -5396727328194265703 */ select\r\nsample_time::timestamp as \"time\"\r\n,format($1,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,$2,$3) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $4 and $5\r\n--And wait_event_component in (''YSQL'',''TServer'')\r\nand (\r\n  gv$host in ($6) or gv$zone in ($7) or gv$region in ($8) or gv$cloud in ($9)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id"],"prefix":"All except:","readOnly":true}},"properties":[{"id":"custom.hideFrom","value":{"legend":false,"tooltip":false,"viz":true}}]}]},"gridPos":{"h":15,"w":12,"x":0,"y":25},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":40},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":41},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":74},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":128},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\n--And wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":71,"weekStart":""}');
INSERT INTO dashboard_version VALUES(257,4,71,0,72,'2024-07-05 21:26:12',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Cpu YSQLQuery:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS Postgres TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network TabletWait:ConflictResolution_ResolveConficts"},"properties":[{"id":"color","value":{"fixedColor":"light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network Consensus:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-orange","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition Common:Rpc_Done"},"properties":[{"id":"color","value":{"fixedColor":"super-light-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL IPC YSQLQuery:ExecuteGather"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition TabletWait:ConflictResolution_WaitOnConflictingTxns"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-red","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Name","sortDesc":false,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_type ,wait_event_class,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":24},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[{"__systemRef":"hideSeriesFrom","matcher":{"id":"byNames","options":{"mode":"exclude","names":["  /* -5396727328194265703 */ select\r\nsample_time::timestamp as \"time\"\r\n,format($1,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,$2,$3) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $4 and $5\r\n--And wait_event_component in (''YSQL'',''TServer'')\r\nand (\r\n  gv$host in ($6) or gv$zone in ($7) or gv$region in ($8) or gv$cloud in ($9)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id"],"prefix":"All except:","readOnly":true}},"properties":[{"id":"custom.hideFrom","value":{"legend":false,"tooltip":false,"viz":true}}]}]},"gridPos":{"h":15,"w":12,"x":0,"y":25},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":40},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":41},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":74},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":128},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":72,"weekStart":""}');
INSERT INTO dashboard_version VALUES(258,4,72,0,73,'2024-07-05 22:07:31',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Cpu YSQLQuery:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS Postgres TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network TabletWait:ConflictResolution_ResolveConficts"},"properties":[{"id":"color","value":{"fixedColor":"light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL Network TServerWait:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network Consensus:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-orange","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition Common:Rpc_Done"},"properties":[{"id":"color","value":{"fixedColor":"super-light-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL IPC YSQLQuery:ExecuteGather"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition TabletWait:ConflictResolution_WaitOnConflictingTxns"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-red","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Name","sortDesc":false,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s:%s (%s)'',wait_event_component,wait_event_type,wait_event,wait_event_class)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":24},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[{"__systemRef":"hideSeriesFrom","matcher":{"id":"byNames","options":{"mode":"exclude","names":["  /* -5396727328194265703 */ select\r\nsample_time::timestamp as \"time\"\r\n,format($1,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,$2,$3) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $4 and $5\r\n--And wait_event_component in (''YSQL'',''TServer'')\r\nand (\r\n  gv$host in ($6) or gv$zone in ($7) or gv$region in ($8) or gv$cloud in ($9)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id"],"prefix":"All except:","readOnly":true}},"properties":[{"id":"custom.hideFrom","value":{"legend":false,"tooltip":false,"viz":true}}]}]},"gridPos":{"h":15,"w":12,"x":0,"y":25},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":40},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":41},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":74},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":128},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":73,"weekStart":""}');
INSERT INTO dashboard_version VALUES(259,4,73,0,74,'2024-07-05 22:25:44',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Cpu Common:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Network Consensus:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-orange","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition Common:Rpc_Done"},"properties":[{"id":"color","value":{"fixedColor":"super-light-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL IPC YSQLQuery:ExecuteGather"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer WaitOnCondition TabletWait:ConflictResolution_WaitOnConflictingTxns"},"properties":[{"id":"color","value":{"fixedColor":"semi-dark-red","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":24},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[{"__systemRef":"hideSeriesFrom","matcher":{"id":"byNames","options":{"mode":"exclude","names":["  /* -5396727328194265703 */ select\r\nsample_time::timestamp as \"time\"\r\n,format($1,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,$2,$3) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $4 and $5\r\n--And wait_event_component in (''YSQL'',''TServer'')\r\nand (\r\n  gv$host in ($6) or gv$zone in ($7) or gv$region in ($8) or gv$cloud in ($9)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id"],"prefix":"All except:","readOnly":true}},"properties":[{"id":"custom.hideFrom","value":{"legend":false,"tooltip":false,"viz":true}}]}]},"gridPos":{"h":15,"w":12,"x":0,"y":25},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":40},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":41},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":74},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":128},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":74,"weekStart":""}');
INSERT INTO dashboard_version VALUES(260,4,74,0,75,'2024-07-05 22:31:51',1,'colors with new names','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":24,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":24},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[{"__systemRef":"hideSeriesFrom","matcher":{"id":"byNames","options":{"mode":"exclude","names":["  /* -5396727328194265703 */ select\r\nsample_time::timestamp as \"time\"\r\n,format($1,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,$2,$3) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $4 and $5\r\n--And wait_event_component in (''YSQL'',''TServer'')\r\nand (\r\n  gv$host in ($6) or gv$zone in ($7) or gv$region in ($8) or gv$cloud in ($9)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id"],"prefix":"All except:","readOnly":true}},"properties":[{"id":"custom.hideFrom","value":{"legend":false,"tooltip":false,"viz":true}}]}]},"gridPos":{"h":15,"w":24,"x":0,"y":25},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":40},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":41},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":74},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":128},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-1m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":75,"weekStart":""}');
INSERT INTO dashboard_version VALUES(261,4,75,0,76,'2024-07-05 22:33:00',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":7,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":24},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[{"__systemRef":"hideSeriesFrom","matcher":{"id":"byNames","options":{"mode":"exclude","names":["  /* -5396727328194265703 */ select\r\nsample_time::timestamp as \"time\"\r\n,format($1,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,$2,$3) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $4 and $5\r\n--And wait_event_component in (''YSQL'',''TServer'')\r\nand (\r\n  gv$host in ($6) or gv$zone in ($7) or gv$region in ($8) or gv$cloud in ($9)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id"],"prefix":"All except:","readOnly":true}},"properties":[{"id":"custom.hideFrom","value":{"legend":false,"tooltip":false,"viz":true}}]}]},"gridPos":{"h":15,"w":12,"x":0,"y":25},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":40},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":41},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":74},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":128},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":false,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["TServer","YSQL"],"value":["TServer","YSQL"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-3h","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":76,"weekStart":""}');
INSERT INTO dashboard_version VALUES(262,4,76,0,77,'2024-07-06 09:26:21',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":26},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[{"__systemRef":"hideSeriesFrom","matcher":{"id":"byNames","options":{"mode":"exclude","names":["  /* -5396727328194265703 */ select\r\nsample_time::timestamp as \"time\"\r\n,format($1,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,$2,$3) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $4 and $5\r\n--And wait_event_component in (''YSQL'',''TServer'')\r\nand (\r\n  gv$host in ($6) or gv$zone in ($7) or gv$region in ($8) or gv$cloud in ($9)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id"],"prefix":"All except:","readOnly":true}},"properties":[{"id":"custom.hideFrom","value":{"legend":false,"tooltip":false,"viz":true}}]}]},"gridPos":{"h":15,"w":12,"x":0,"y":27},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":42},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":43},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":76},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":128},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":77,"weekStart":""}');
INSERT INTO dashboard_version VALUES(263,4,77,0,78,'2024-07-06 09:32:37',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":26},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":27},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":42},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":43},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":76},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":128},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\nhaving sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":78,"weekStart":""}');
INSERT INTO dashboard_version VALUES(264,4,78,0,79,'2024-07-06 09:50:27',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":26},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":27},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,query)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":42},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":43},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":76},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":79,"weekStart":""}');
INSERT INTO dashboard_version VALUES(265,4,79,0,80,'2024-07-07 12:03:24',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":30},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":31},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,coalesce(query,'' -- not in pg_stat_statements''))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":48},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":49},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":82},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":80,"weekStart":""}');
INSERT INTO dashboard_version VALUES(266,4,80,0,81,'2024-07-07 12:05:21',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":10},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":11},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,coalesce(query,'' -- not in pg_stat_statements''))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":26},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":27},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":38},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for admin\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":81,"weekStart":""}');
INSERT INTO dashboard_version VALUES(267,4,81,0,82,'2024-07-07 15:06:45',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":30},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":31},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,coalesce(query,'' -- not in pg_stat_statements''))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":46},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":47},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":80},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for current_user\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for current_user\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw(''$username'',''$password'') \n--union all \n--select ''%'',''%''\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":82,"weekStart":""}');
INSERT INTO dashboard_version VALUES(268,4,82,0,83,'2024-07-07 15:08:50',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":30},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":31},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,coalesce(query,'' -- not in pg_stat_statements''))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":46},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":47},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":80},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for current_user\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"drop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper postgres_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop user mapping if exists for current_user\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''drop view if exists \"gv$%1$s\"'', foreign_table_name) as sql from views\n    union all\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":83,"weekStart":""}');
INSERT INTO dashboard_version VALUES(269,4,83,0,84,'2024-07-07 18:27:42',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":20},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":21},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,coalesce(query,'' -- not in pg_stat_statements''))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":36},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":37},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":59},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"\n\n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"\n\n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":84,"weekStart":""}');
INSERT INTO dashboard_version VALUES(270,4,84,0,85,'2024-07-07 19:00:35',1,'add backgrounds','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":30},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":31},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,coalesce(query,\r\ncase query_id -- https://github.com/yugabyte/yugabyte-db/blob/d040fd81ea14e83c08300daf5e2f0c7a0eab42de/src/yb/ash/wait_state.h#L195\r\nwhen 1 then ''-- background: kQueryIdForLogAppender''\r\nwhen 2 then ''-- background: kQueryIdForFlush''\r\nwhen 3 then ''-- background: kQueryIdForCompaction''\r\nwhen 4 then ''-- background: kQueryIdForRaftUpdateConsensus''\r\nwhen 5 then ''-- background: kQueryIdForCatalogRequests''\r\nwhen 6 then ''-- background: kQueryIdForLogBackgroundSync''\r\nend,'' -- not in pg_stat_statements''))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":46},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":47},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":80},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"\n\n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"\n\n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":85,"weekStart":""}');
INSERT INTO dashboard_version VALUES(271,4,85,0,86,'2024-07-07 20:17:10',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":30},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":31},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,coalesce(query,\r\ncase query_id -- https://github.com/yugabyte/yugabyte-db/blob/d040fd81ea14e83c08300daf5e2f0c7a0eab42de/src/yb/ash/wait_state.h#L195\r\nwhen 1 then ''-- background: kQueryIdForLogAppender''\r\nwhen 2 then ''-- background: kQueryIdForFlush''\r\nwhen 3 then ''-- background: kQueryIdForCompaction''\r\nwhen 4 then ''-- background: kQueryIdForRaftUpdateConsensus''\r\nwhen 5 then ''-- background: kQueryIdForCatalogRequests''\r\nwhen 6 then ''-- background: kQueryIdForLogBackgroundSync''\r\nend,'' -- not in pg_stat_statements''))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":46},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":47},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":80},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n username text default ''yugabyte'', password text default ''yugabyte''\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host, username, password ) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":86,"weekStart":""}');
INSERT INTO dashboard_version VALUES(272,4,86,0,87,'2024-07-07 20:38:39',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":30},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":31},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,coalesce(query,\r\ncase query_id -- https://github.com/yugabyte/yugabyte-db/blob/d040fd81ea14e83c08300daf5e2f0c7a0eab42de/src/yb/ash/wait_state.h#L195\r\nwhen 1 then ''-- background: kQueryIdForLogAppender''\r\nwhen 2 then ''-- background: kQueryIdForFlush''\r\nwhen 3 then ''-- background: kQueryIdForCompaction''\r\nwhen 4 then ''-- background: kQueryIdForRaftUpdateConsensus''\r\nwhen 5 then ''-- background: kQueryIdForCatalogRequests''\r\nwhen 6 then ''-- background: kQueryIdForLogBackgroundSync''\r\nend,'' -- not in pg_stat_statements''))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":46},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":47},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":80},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"-- It should not need the password as it uses current_user, but I didn''t test it. \n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"-- It should not need the password as it uses current_user, but I didn''t test it. \n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":87,"weekStart":""}');
INSERT INTO dashboard_version VALUES(273,4,87,0,88,'2024-07-07 20:42:48',1,'','{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s %s %s:%s'',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":30},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":31},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''/* %s */ %s'',query_id,coalesce(query,\r\ncase query_id -- https://github.com/yugabyte/yugabyte-db/blob/d040fd81ea14e83c08300daf5e2f0c7a0eab42de/src/yb/ash/wait_state.h#L195\r\nwhen 1 then ''-- background: kQueryIdForLogAppender''\r\nwhen 2 then ''-- background: kQueryIdForFlush''\r\nwhen 3 then ''-- background: kQueryIdForCompaction''\r\nwhen 4 then ''-- background: kQueryIdForRaftUpdateConsensus''\r\nwhen 5 then ''-- background: kQueryIdForCatalogRequests''\r\nwhen 6 then ''-- background: kQueryIdForLogBackgroundSync''\r\nend,'' -- not in pg_stat_statements''))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":46},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green"},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":47},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":13,"w":24,"x":0,"y":80},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format(''%s.%s %s.%s [%s,%s] %s %s'',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'''') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"-- script to create the GV$ views though Foreign Data Wrapper\n-- It should not need the password as it uses current_user, but I didn''t test it. \n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"-- script to create the GV$ views though Foreign Data Wrapper\n-- It should not need the password as it uses current_user, but I didn''t test it. \n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw(\n) returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute ''create extension if not exists postgres_fdw'';\n  execute ''drop foreign data wrapper if exists yb_ash_fdw cascade'';\n  execute ''create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler'';\n  for ddl in (\n    select format(''\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     '', host, host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create server) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create user mapping) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     drop schema if exists \"gv$%1$s\" cascade\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(drop schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     create schema if not exists \"gv$%1$s\"\n     '',host) as sql\n     from yb_servers()\n  ) loop\n   raise notice ''(create schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format(''\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     '', host) as sql from yb_servers()\n  ) loop\n   raise notice ''(import foreign schema) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format(''gv$%1$s'',s.host)\n    )\n    select format(''create view public.\"gv$%2$s\" as %1$s'',\n     string_agg(\n     format(''\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%2$s\".%1$I\n     '', foreign_table_name, host, zone, region, cloud)\n     ,'' union all ''), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice ''(create views) SQL: %'', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query \nselect distinct format(''%s.%s.%s %s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where ''$agg''=''Host''\nunion all\nselect distinct format(''%s.%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Zone''\nunion all\nselect distinct format(''%s.%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Region''\nunion all\nselect distinct format(''%s'',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where ''$agg''=''Cloud''\n;\n end;\n$PL$ language plpgsql;\n\n\n\nselect \"__text\", \"__value\" from yb_ash_fdw() \n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":88,"weekStart":""}');
CREATE TABLE `team` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `name` TEXT NOT NULL
, `org_id` INTEGER NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `uid` TEXT NULL, `email` TEXT NULL);
CREATE TABLE `team_member` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `team_id` INTEGER NOT NULL
, `user_id` INTEGER NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `external` INTEGER NULL, `permission` INTEGER NULL);
CREATE TABLE `dashboard_acl` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `dashboard_id` INTEGER NOT NULL
, `user_id` INTEGER NULL
, `team_id` INTEGER NULL
, `permission` INTEGER NOT NULL DEFAULT 4
, `role` TEXT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
);
INSERT INTO dashboard_acl VALUES(1,-1,-1,NULL,NULL,1,'Viewer','2017-06-20','2017-06-20');
INSERT INTO dashboard_acl VALUES(2,-1,-1,NULL,NULL,2,'Editor','2017-06-20','2017-06-20');
CREATE TABLE `tag` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `key` TEXT NOT NULL
, `value` TEXT NOT NULL
);
CREATE TABLE `login_attempt` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `username` TEXT NOT NULL
, `ip_address` TEXT NOT NULL
, `created` INTEGER NOT NULL DEFAULT 0
);
CREATE TABLE `user_auth` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `user_id` INTEGER NOT NULL
, `auth_module` TEXT NOT NULL
, `auth_id` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `o_auth_access_token` TEXT NULL, `o_auth_refresh_token` TEXT NULL, `o_auth_token_type` TEXT NULL, `o_auth_expiry` DATETIME NULL, `o_auth_id_token` TEXT NULL);
CREATE TABLE `server_lock` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `operation_uid` TEXT NOT NULL
, `version` INTEGER NOT NULL
, `last_execution` INTEGER NOT NULL
);
INSERT INTO server_lock VALUES(2,'cleanup expired auth tokens',78,1720352537);
INSERT INTO server_lock VALUES(10,'delete old login attempts',3909,1720382337);
INSERT INTO server_lock VALUES(45,'cleanup old anon devices',70,1720360556);
CREATE TABLE `user_auth_token` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `user_id` INTEGER NOT NULL
, `auth_token` TEXT NOT NULL
, `prev_auth_token` TEXT NOT NULL
, `user_agent` TEXT NOT NULL
, `client_ip` TEXT NOT NULL
, `auth_token_seen` INTEGER NOT NULL
, `seen_at` INTEGER NULL
, `rotated_at` INTEGER NOT NULL
, `created_at` INTEGER NOT NULL
, `updated_at` INTEGER NOT NULL
, `revoked_at` INTEGER NULL);
INSERT INTO user_auth_token VALUES(9,1,'34d746a767e89fbeefa530a0ef455e59a308980b17b742b20e82f755e2f2b757','c01ea0fabbc36d6a5cbce62bd74f458bc88957307baf0eff7e39887bb0fd0a02','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0','172.24.0.1',1,1720125177,1720125105,1718778354,1718778354,0);
INSERT INTO user_auth_token VALUES(10,1,'f64526c3977a47a8e3a7d17e82373f004c5e7209584046aab9b838f0f2005ae0','f7ca49b98c550611fcd9199f135c0a3ea268afef8d0194ef21a1a44df170eea6','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0','192.168.64.1',1,1720296488,1720296488,1720125759,1720125759,0);
INSERT INTO user_auth_token VALUES(11,1,'06dc10858c1d54ecbb69bd8e9a436464193f12ebcfc705edac7b4040cd3d4b8b','c346ab2ba315d4f7ee0acf5095d12f35287c9e024103f73e407d95caad9add02','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0','192.168.176.1',1,1720365758,1720365749,1720352740,1720352740,0);
INSERT INTO user_auth_token VALUES(12,1,'4ae1287b5f265bf4bb26c3612713d6e5f47087e216a0177a16ac70c0b6a1226a','ea3d1952752059a2a49f940a4afafae735cef49c50ddb9a9f29c1748cc612700','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0','192.168.96.1',1,1720384540,1720384540,1720374808,1720374808,0);
CREATE TABLE `cache_data` (
`cache_key` TEXT PRIMARY KEY NOT NULL
, `data` BLOB NOT NULL
, `expires` INTEGER NOT NULL
, `created_at` INTEGER NOT NULL
);
CREATE TABLE `short_url` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `uid` TEXT NOT NULL
, `path` TEXT NOT NULL
, `created_by` INTEGER NOT NULL
, `created_at` INTEGER NOT NULL
, `last_seen_at` INTEGER NULL
);
CREATE TABLE `alert_instance` (
"rule_org_id" INTEGER NOT NULL
, "rule_uid" TEXT NOT NULL DEFAULT 0
, `labels` TEXT NOT NULL
, `labels_hash` TEXT NOT NULL
, `current_state` TEXT NOT NULL
, `current_state_since` INTEGER NOT NULL
, `last_eval_time` INTEGER NOT NULL
, `current_state_end` INTEGER NOT NULL DEFAULT 0, `current_reason` TEXT NULL, `result_fingerprint` TEXT NULL, PRIMARY KEY ( "rule_org_id","rule_uid",`labels_hash` ));
CREATE TABLE `alert_rule` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `title` TEXT NOT NULL
, `condition` TEXT NOT NULL
, `data` TEXT NOT NULL
, `updated` DATETIME NOT NULL
, `interval_seconds` INTEGER NOT NULL DEFAULT 60
, `version` INTEGER NOT NULL DEFAULT 0
, `uid` TEXT NOT NULL DEFAULT 0
, `namespace_uid` TEXT NOT NULL
, `rule_group` TEXT NOT NULL
, `no_data_state` TEXT NOT NULL DEFAULT 'NoData'
, `exec_err_state` TEXT NOT NULL DEFAULT 'Alerting'
, `for` INTEGER NOT NULL DEFAULT 0, `annotations` TEXT NULL, `labels` TEXT NULL, `dashboard_uid` TEXT NULL, `panel_id` INTEGER NULL, `rule_group_idx` INTEGER NOT NULL DEFAULT 1, `is_paused` INTEGER NOT NULL DEFAULT 0, `notification_settings` TEXT NULL);
CREATE TABLE `alert_rule_version` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `rule_org_id` INTEGER NOT NULL
, `rule_uid` TEXT NOT NULL DEFAULT 0
, `rule_namespace_uid` TEXT NOT NULL
, `rule_group` TEXT NOT NULL
, `parent_version` INTEGER NOT NULL
, `restored_from` INTEGER NOT NULL
, `version` INTEGER NOT NULL
, `created` DATETIME NOT NULL
, `title` TEXT NOT NULL
, `condition` TEXT NOT NULL
, `data` TEXT NOT NULL
, `interval_seconds` INTEGER NOT NULL
, `no_data_state` TEXT NOT NULL DEFAULT 'NoData'
, `exec_err_state` TEXT NOT NULL DEFAULT 'Alerting'
, `for` INTEGER NOT NULL DEFAULT 0, `annotations` TEXT NULL, `labels` TEXT NULL, `rule_group_idx` INTEGER NOT NULL DEFAULT 1, `is_paused` INTEGER NOT NULL DEFAULT 0, `notification_settings` TEXT NULL);
CREATE TABLE `alert_configuration` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `alertmanager_configuration` TEXT NOT NULL
, `configuration_version` TEXT NOT NULL
, `created_at` INTEGER NOT NULL
, `default` INTEGER NOT NULL DEFAULT 0, `org_id` INTEGER NOT NULL DEFAULT 0, `configuration_hash` TEXT NOT NULL DEFAULT 'not-yet-calculated');
INSERT INTO alert_configuration VALUES(1,replace('{\n	"alertmanager_config": {\n		"route": {\n			"receiver": "grafana-default-email",\n			"group_by": ["grafana_folder", "alertname"]\n		},\n		"receivers": [{\n			"name": "grafana-default-email",\n			"grafana_managed_receiver_configs": [{\n				"uid": "",\n				"name": "email receiver",\n				"type": "email",\n				"isDefault": true,\n				"settings": {\n					"addresses": "<example@email.com>"\n				}\n			}]\n		}]\n	}\n}\n','\n',char(10)),'v1',1707341679,1,1,'e0528a75784033ae7b15c40851d89484');
CREATE TABLE `ngalert_configuration` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `alertmanagers` TEXT NULL
, `created_at` INTEGER NOT NULL
, `updated_at` INTEGER NOT NULL
, `send_alerts_to` INTEGER NOT NULL DEFAULT 0);
CREATE TABLE `provenance_type` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `record_key` TEXT NOT NULL
, `record_type` TEXT NOT NULL
, `provenance` TEXT NOT NULL
);
CREATE TABLE `alert_image` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `token` TEXT NOT NULL
, `path` TEXT NOT NULL
, `url` TEXT NOT NULL
, `created_at` DATETIME NOT NULL
, `expires_at` DATETIME NOT NULL
);
CREATE TABLE `alert_configuration_history` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL DEFAULT 0
, `alertmanager_configuration` TEXT NOT NULL
, `configuration_hash` TEXT NOT NULL DEFAULT 'not-yet-calculated'
, `configuration_version` TEXT NOT NULL
, `created_at` INTEGER NOT NULL
, `default` INTEGER NOT NULL DEFAULT 0
, `last_applied` INTEGER NOT NULL DEFAULT 0);
INSERT INTO alert_configuration_history VALUES(1,1,replace('{\n	"alertmanager_config": {\n		"route": {\n			"receiver": "grafana-default-email",\n			"group_by": ["grafana_folder", "alertname"]\n		},\n		"receivers": [{\n			"name": "grafana-default-email",\n			"grafana_managed_receiver_configs": [{\n				"uid": "",\n				"name": "email receiver",\n				"type": "email",\n				"isDefault": true,\n				"settings": {\n					"addresses": "<example@email.com>"\n				}\n			}]\n		}]\n	}\n}\n','\n',char(10)),'e0528a75784033ae7b15c40851d89484','v1',1707341679,1,1720385476);
CREATE TABLE `library_element` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `folder_id` INTEGER NOT NULL
, `uid` TEXT NOT NULL
, `name` TEXT NOT NULL
, `kind` INTEGER NOT NULL
, `type` TEXT NOT NULL
, `description` TEXT NOT NULL
, `model` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `created_by` INTEGER NOT NULL
, `updated` DATETIME NOT NULL
, `updated_by` INTEGER NOT NULL
, `version` INTEGER NOT NULL
, `folder_uid` TEXT NULL);
INSERT INTO library_element VALUES(1,1,0,'f93a7cf1-f098-4cf9-89f4-eb38de4ead23','rows inserted',1,'timeseries','',X'7b2264617461736f75726365223a7b2274797065223a2270726f6d657468657573222c22756964223a2265343433636131312d636663632d343035352d616434372d356538323265313335393535227d2c226465736372697074696f6e223a22222c226669656c64436f6e666967223a7b2264656661756c7473223a7b22636f6c6f72223a7b226d6f6465223a2270616c657474652d636c6173736963227d2c22637573746f6d223a7b2261786973426f7264657253686f77223a66616c73652c226178697343656e74657265645a65726f223a66616c73652c2261786973436f6c6f724d6f6465223a2274657874222c22617869734c6162656c223a22222c2261786973506c6163656d656e74223a226175746f222c22626172416c69676e6d656e74223a302c22647261775374796c65223a226c696e65222c2266696c6c4f706163697479223a302c226772616469656e744d6f6465223a226e6f6e65222c226869646546726f6d223a7b226c6567656e64223a66616c73652c22746f6f6c746970223a66616c73652c2276697a223a66616c73657d2c22696e736572744e756c6c73223a66616c73652c226c696e65496e746572706f6c6174696f6e223a226c696e656172222c226c696e655769647468223a312c22706f696e7453697a65223a352c227363616c65446973747269627574696f6e223a7b2274797065223a226c696e656172227d2c2273686f77506f696e7473223a226175746f222c227370616e4e756c6c73223a66616c73652c22737461636b696e67223a7b2267726f7570223a2241222c226d6f6465223a226e6f6e65227d2c227468726573686f6c64735374796c65223a7b226d6f6465223a226f6666227d7d2c226d617070696e6773223a5b5d2c227468726573686f6c6473223a7b226d6f6465223a226162736f6c757465222c227374657073223a5b7b22636f6c6f72223a22677265656e222c2276616c7565223a6e756c6c7d2c7b22636f6c6f72223a22726564222c2276616c7565223a38307d5d7d2c22756e69745363616c65223a747275657d2c226f7665727269646573223a5b5d7d2c2267726964506f73223a7b2268223a382c2277223a31332c2278223a31312c2279223a307d2c226964223a362c226f7074696f6e73223a7b226c6567656e64223a7b2263616c6373223a5b5d2c22646973706c61794d6f6465223a226c697374222c22706c6163656d656e74223a22626f74746f6d222c2273686f774c6567656e64223a747275657d2c22746f6f6c746970223a7b226d6f6465223a226d756c7469222c22736f7274223a226e6f6e65227d7d2c2274617267657473223a5b7b2264617461736f75726365223a7b2274797065223a2270726f6d657468657573222c22756964223a2265343433636131312d636663632d343035352d616434372d356538323265313335393535227d2c2264697361626c655465787457726170223a66616c73652c22656469746f724d6f6465223a226275696c646572222c2265787072223a2273756d206279287461626c655f6e616d652920286964656c746128726f77735f696e7365727465647b7461626c655f747970653d5c22504753514c5f5441424c455f545950455c227d5b356d5d2929222c2266756c6c4d657461536561726368223a66616c73652c22696e636c7564654e756c6c4d65746164617461223a747275652c22696e7374616e74223a66616c73652c226c6567656e64466f726d6174223a225f5f6175746f222c2272616e6765223a747275652c227265664964223a2241222c227573654261636b656e64223a66616c73657d5d2c227469746c65223a22726f777320696e736572746564222c2274797065223a2274696d65736572696573227d','2024-02-08 21:13:17',1,'2024-02-08 21:33:42',1,2,NULL);
CREATE TABLE `library_element_connection` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `element_id` INTEGER NOT NULL
, `kind` INTEGER NOT NULL
, `connection_id` INTEGER NOT NULL
, `created` DATETIME NOT NULL
, `created_by` INTEGER NOT NULL
);
CREATE TABLE `data_keys` (
"name" TEXT PRIMARY KEY NOT NULL
, `active` INTEGER NOT NULL
, `scope` TEXT NOT NULL
, `provider` TEXT NOT NULL
, `encrypted_data` BLOB NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, "label" TEXT NOT NULL DEFAULT '');
INSERT INTO data_keys VALUES('acc02c3d-55fd-47e6-9f01-d908735dcc86',1,'root','secretKey.v1',X'2a5957567a4c574e6d59672a7944656357715773f9a8f886b86c496bb4b17a41f4efb87f7f4fc47423db20d100114074919e011f','2024-02-07 21:39:05','2024-02-07 21:39:05','2024-02-07/root@secretKey.v1');
INSERT INTO data_keys VALUES('bdphb8iqmv9j4a',1,'root','secretKey.v1',X'2a5957567a4c574e6d59672a6569707a455535318055b9d628b643d5dbc5f9f4f196d93faae0f51fed40b611c37f843bb27906c1','2024-06-21 20:05:44','2024-06-21 20:05:44','2024-06-21/root@secretKey.v1');
INSERT INTO data_keys VALUES('ddqixdx1faozkf',1,'root','secretKey.v1',X'2a5957567a4c574e6d59672a4865487372314c51485f74658c3de6967361beeda9114c9046d940b11f8abf896b1beded1b0dc434','2024-07-02 09:05:52','2024-07-02 09:05:52','2024-07-02/root@secretKey.v1');
INSERT INTO data_keys VALUES('bdqrbsyicb4lca',1,'root','secretKey.v1',X'2a5957567a4c574e6d59672a53597543507946434920ba4fbdedf0f3071a45dcb0b1758837a29ea23a7831b7e595114d317c5d3b','2024-07-04 17:35:59','2024-07-04 17:35:59','2024-07-04/root@secretKey.v1');
INSERT INTO data_keys VALUES('adqv2bu6qz6yob',1,'root','secretKey.v1',X'2a5957567a4c574e6d59672a4950454d48664e361a2b769319b94f6070379342977caffd4650060bd8bee3fd2173a48a6d64a639','2024-07-05 18:44:01','2024-07-05 18:44:01','2024-07-05/root@secretKey.v1');
INSERT INTO data_keys VALUES('adr22r1sd5q0we',1,'root','secretKey.v1',X'2a5957567a4c574e6d59672a69476336497751742b58663b8d4fab9b4538e36d75dee5649a5c26c33569b412fc0a4c6a3d0b8a5f','2024-07-07 17:53:42','2024-07-07 17:53:42','2024-07-07/root@secretKey.v1');
CREATE TABLE `secrets` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `namespace` TEXT NOT NULL
, `type` TEXT NOT NULL
, `value` TEXT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
);
INSERT INTO secrets VALUES(6,1,'YugabyteDB','datasource','I1lXUnlNakp5TVhOa05YRXdkMlUjKllXVnpMV05tWWcqZVpZT3BEUjCaN9MX7Jfnuy9KiZZ96Em32G+xLm6Of7EITQjdyAGfh+0yMSrk8ek','2024-07-04 20:51:25','2024-07-07 18:00:20');
CREATE TABLE `kv_store` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `namespace` TEXT NOT NULL
, `key` TEXT NOT NULL
, `value` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
);
INSERT INTO kv_store VALUES(1,0,'ngalert.migration','currentAlertingType','UnifiedAlerting','2024-02-07 21:34:39','2024-02-07 21:34:39.590895366+00:00');
INSERT INTO kv_store VALUES(2,1,'ngalert.migration','stateKey','{"orgId":1,"migratedDashboards":{},"migratedChannels":{},"createdFolders":null}','2024-02-07 21:34:39','2024-02-07 21:34:39');
INSERT INTO kv_store VALUES(3,1,'ngalert.migration','migrated','true','2024-02-07 21:34:39','2024-02-07 21:34:39');
INSERT INTO kv_store VALUES(4,0,'datasource','secretMigrationStatus','compatible','2024-02-07 21:34:39','2024-02-07 21:34:39');
INSERT INTO kv_store VALUES(5,0,'plugin.publickeys','key-7e4d0c6a708866e7',replace(replace('-----BEGIN PGP PUBLIC KEY BLOCK-----\r\nVersion: OpenPGP.js v4.10.1\r\nComment: https://openpgpjs.org\r\n\r\nxpMEXpTXXxMFK4EEACMEIwQBiOUQhvGbDLvndE0fEXaR0908wXzPGFpf0P0Z\r\nHJ06tsq+0higIYHp7WTNJVEZtcwoYLcPRGaa9OQqbUU63BEyZdgAkPTz3RFd\r\n5+TkDWZizDcaVFhzbDd500yTwexrpIrdInwC/jrgs7Zy/15h8KA59XXUkdmT\r\nYB6TR+OA9RKME+dCJozNGUdyYWZhbmEgPGVuZ0BncmFmYW5hLmNvbT7CvAQQ\r\nEwoAIAUCXpTXXwYLCQcIAwIEFQgKAgQWAgEAAhkBAhsDAh4BAAoJEH5NDGpw\r\niGbnaWoCCQGQ3SQnCkRWrG6XrMkXOKfDTX2ow9fuoErN46BeKmLM4f1EkDZQ\r\nTpq3SE8+My8B5BIH3SOcBeKzi3S57JHGBdFA+wIJAYWMrJNIvw8GeXne+oUo\r\nNzzACdvfqXAZEp/HFMQhCKfEoWGJE8d2YmwY2+3GufVRTI5lQnZOHLE8L/Vc\r\n1S5MXESjzpcEXpTXXxIFK4EEACMEIwQBtHX/SD5Qm3v4V92qpaIZQgtTX0sT\r\ncFPjYWAHqsQ1iENrYN/vg1wU3ADlYATvydOQYvkTyT/tbDvx2Fse8PL84MQA\r\nYKKQ6AJ3gLVvmeouZdU03YoV4MYaT8KbnJUkZQZkqdz2riOlySNI9CG3oYmv\r\nomjUAtzgAgnCcurfGLZkkMxlmY8DAQoJwqQEGBMKAAkFAl6U118CGwwACgkQ\r\nfk0ManCIZuc0jAIJAVw2xdLr4ZQqPUhubrUyFcqlWoW8dQoQagwO8s8ubmby\r\nKuLA9FWJkfuuRQr+O9gHkDVCez3aism7zmJBqIOi38aNAgjJ3bo6leSS2jR/\r\nx5NqiKVi83tiXDPncDQYPymOnMhW0l7CVA7wj75HrFvvlRI/4MArlbsZ2tBn\r\nN1c5v9v/4h6qeA==\r\n=DNbR\r\n-----END PGP PUBLIC KEY BLOCK-----\r\n','\r',char(13)),'\n',char(10)),'2024-02-07 21:34:39','2024-02-07 21:34:39');
INSERT INTO kv_store VALUES(6,0,'plugin.publickeys','last_updated','2024-06-29T20:57:47Z','2024-02-07 21:34:39','2024-06-29 20:57:47.507736309+00:00');
INSERT INTO kv_store VALUES(7,1,'alertmanager','notifications','','2024-02-07 21:35:47','2024-02-07 21:35:47');
INSERT INTO kv_store VALUES(8,1,'alertmanager','silences','','2024-02-07 21:35:47','2024-02-07 21:35:47');
INSERT INTO kv_store VALUES(9,0,'infra.usagestats','anonymous_id','134f235c-796a-490c-bcc8-124af530ba52','2024-03-07 14:25:33','2024-03-07 14:25:33');
INSERT INTO kv_store VALUES(10,0,'infra.usagestats','last_sent','2024-07-07T11:47:05Z','2024-03-07 14:25:34','2024-07-07 11:47:05.903577332+00:00');
INSERT INTO kv_store VALUES(11,0,'plugin.angularpatterns','angular_patterns','[{"Name":"PanelCtrl","Pattern":"PanelCtrl","Type":"contains"},{"Name":"ConfigCtrl","Pattern":"ConfigCtrl","Type":"contains"},{"Name":"app/plugins/sdk","Pattern":"app/plugins/sdk","Type":"contains"},{"Name":"Angular Specific Function","Pattern":"angular.isNumber(","Type":"contains"},{"Name":"ctrl.annotation","Pattern":"ctrl.annotation","Type":"contains"},{"Name":"QueryCtrl","Pattern":"[\"'']QueryCtrl[\"'']","Type":"regex"}]','2024-06-02 20:34:53','2024-06-19 06:25:17.887085034+00:00');
INSERT INTO kv_store VALUES(12,0,'plugin.angularpatterns','last_updated','2024-07-07T20:08:40Z','2024-06-02 20:34:53','2024-07-07 20:08:40.432962866+00:00');
INSERT INTO kv_store VALUES(13,0,'plugin.angularpatterns','etag','"1a8-1yOry0c74BKAzc7BUbZdNV0sYic"','2024-06-02 20:34:53','2024-06-19 06:25:17.895024279+00:00');
CREATE TABLE `permission` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `role_id` INTEGER NOT NULL
, `action` TEXT NOT NULL
, `scope` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `kind` TEXT NOT NULL DEFAULT '', `attribute` TEXT NOT NULL DEFAULT '', `identifier` TEXT NOT NULL DEFAULT '');
INSERT INTO permission VALUES(28,1,'dashboards:read','dashboards:uid:cdh1ginpqkwlcc','2024-03-28 16:21:47','2024-03-28 16:21:47','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(29,1,'dashboards:write','dashboards:uid:cdh1ginpqkwlcc','2024-03-28 16:21:47','2024-03-28 16:21:47','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(30,1,'dashboards:delete','dashboards:uid:cdh1ginpqkwlcc','2024-03-28 16:21:47','2024-03-28 16:21:47','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(31,1,'dashboards.permissions:read','dashboards:uid:cdh1ginpqkwlcc','2024-03-28 16:21:47','2024-03-28 16:21:47','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(32,1,'dashboards.permissions:write','dashboards:uid:cdh1ginpqkwlcc','2024-03-28 16:21:47','2024-03-28 16:21:47','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(33,2,'dashboards:read','dashboards:uid:cdh1ginpqkwlcc','2024-03-28 16:21:47','2024-03-28 16:21:47','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(34,2,'dashboards:write','dashboards:uid:cdh1ginpqkwlcc','2024-03-28 16:21:47','2024-03-28 16:21:47','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(35,2,'dashboards:delete','dashboards:uid:cdh1ginpqkwlcc','2024-03-28 16:21:47','2024-03-28 16:21:47','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(36,3,'dashboards:read','dashboards:uid:cdh1ginpqkwlcc','2024-03-28 16:21:47','2024-03-28 16:21:47','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(55,1,'annotations:read','dashboards:uid:cdh1ginpqkwlcc','2024-06-02 20:34:53','2024-06-02 20:34:53','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(56,1,'annotations:create','dashboards:uid:cdh1ginpqkwlcc','2024-06-02 20:34:53','2024-06-02 20:34:53','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(57,1,'annotations:delete','dashboards:uid:cdh1ginpqkwlcc','2024-06-02 20:34:53','2024-06-02 20:34:53','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(58,1,'annotations:write','dashboards:uid:cdh1ginpqkwlcc','2024-06-02 20:34:53','2024-06-02 20:34:53','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(87,2,'annotations:read','dashboards:uid:cdh1ginpqkwlcc','2024-06-02 20:34:53','2024-06-02 20:34:53','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(88,2,'annotations:create','dashboards:uid:cdh1ginpqkwlcc','2024-06-02 20:34:53','2024-06-02 20:34:53','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(89,2,'annotations:delete','dashboards:uid:cdh1ginpqkwlcc','2024-06-02 20:34:53','2024-06-02 20:34:53','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(90,2,'annotations:write','dashboards:uid:cdh1ginpqkwlcc','2024-06-02 20:34:53','2024-06-02 20:34:53','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(104,3,'annotations:read','dashboards:uid:cdh1ginpqkwlcc','2024-06-02 20:34:53','2024-06-02 20:34:53','dashboards','uid','cdh1ginpqkwlcc');
INSERT INTO permission VALUES(117,1,'dashboards.permissions:write','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(118,1,'annotations:write','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(119,1,'annotations:create','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(120,1,'dashboards:write','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(121,1,'dashboards:delete','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(122,1,'annotations:read','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(123,1,'annotations:delete','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(124,1,'dashboards:read','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(125,1,'dashboards.permissions:read','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(126,2,'annotations:read','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(127,2,'annotations:write','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(128,2,'annotations:delete','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(129,2,'annotations:create','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(130,2,'dashboards:read','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(131,2,'dashboards:write','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(132,2,'dashboards:delete','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(133,3,'dashboards:read','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(134,3,'annotations:read','dashboards:uid:fdqrpipoq6m80f','2024-07-04 20:09:45','2024-07-04 20:09:45','dashboards','uid','fdqrpipoq6m80f');
INSERT INTO permission VALUES(139,3,'datasources:read','datasources:uid:bdqrt8jw728sgb','2024-07-04 20:51:25','2024-07-04 20:51:25','datasources','uid','bdqrt8jw728sgb');
INSERT INTO permission VALUES(140,3,'datasources:query','datasources:uid:bdqrt8jw728sgb','2024-07-04 20:51:25','2024-07-04 20:51:25','datasources','uid','bdqrt8jw728sgb');
INSERT INTO permission VALUES(141,2,'datasources:read','datasources:uid:bdqrt8jw728sgb','2024-07-04 20:51:25','2024-07-04 20:51:25','datasources','uid','bdqrt8jw728sgb');
INSERT INTO permission VALUES(142,2,'datasources:query','datasources:uid:bdqrt8jw728sgb','2024-07-04 20:51:25','2024-07-04 20:51:25','datasources','uid','bdqrt8jw728sgb');
CREATE TABLE `role` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `name` TEXT NOT NULL
, `description` TEXT NULL
, `version` INTEGER NOT NULL
, `org_id` INTEGER NOT NULL
, `uid` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `display_name` TEXT NULL, `group_name` TEXT NULL, `hidden` INTEGER NOT NULL DEFAULT 0);
INSERT INTO role VALUES(1,'managed:users:1:permissions','',0,1,'f51056fd-3725-4d0a-89e7-30677b5e5f49','2024-02-07 21:42:08','2024-02-07 21:42:08','','',0);
INSERT INTO role VALUES(2,'managed:builtins:editor:permissions','',0,1,'d00a8edd-18c6-427e-86e2-355f0fc843aa','2024-02-07 21:42:08','2024-02-07 21:42:08','','',0);
INSERT INTO role VALUES(3,'managed:builtins:viewer:permissions','',0,1,'a630aab1-7693-4bc5-ba71-b21c2a44f982','2024-02-07 21:42:08','2024-02-07 21:42:08','','',0);
CREATE TABLE `team_role` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `team_id` INTEGER NOT NULL
, `role_id` INTEGER NOT NULL
, `created` DATETIME NOT NULL
);
CREATE TABLE `user_role` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `org_id` INTEGER NOT NULL
, `user_id` INTEGER NOT NULL
, `role_id` INTEGER NOT NULL
, `created` DATETIME NOT NULL
);
INSERT INTO user_role VALUES(1,1,1,1,'2024-02-07 21:42:08');
CREATE TABLE `builtin_role` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `role` TEXT NOT NULL
, `role_id` INTEGER NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `org_id` INTEGER NOT NULL DEFAULT 0);
INSERT INTO builtin_role VALUES(1,'Editor',2,'2024-02-07 21:42:08','2024-02-07 21:42:08',1);
INSERT INTO builtin_role VALUES(2,'Viewer',3,'2024-02-07 21:42:08','2024-02-07 21:42:08',1);
CREATE TABLE `query_history` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `uid` TEXT NOT NULL
, `org_id` INTEGER NOT NULL
, `datasource_uid` TEXT NOT NULL
, `created_by` INTEGER NOT NULL
, `created_at` INTEGER NOT NULL
, `comment` TEXT NOT NULL
, `queries` TEXT NOT NULL
);
INSERT INTO query_history VALUES(5,'edqrqbed2zitcc',1,'fdqrp24s2onpcd',1,1720124320,'','[{"datasource":{"type":"grafana-yugabyte-datasource","uid":"fdqrp24s2onpcd"},"editorMode":"code","format":1,"rawQuery":true,"rawSql":"select 1","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}]');
CREATE TABLE `query_history_star` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `query_uid` TEXT NOT NULL
, `user_id` INTEGER NOT NULL
, `org_id` INTEGER NOT NULL DEFAULT 1);
CREATE TABLE `correlation` (
`uid` TEXT NOT NULL
, `org_id` INTEGER NOT NULL DEFAULT 0
, `source_uid` TEXT NOT NULL
, `target_uid` TEXT NULL
, `label` TEXT NOT NULL
, `description` TEXT NOT NULL
, `config` TEXT NULL
, `provisioned` INTEGER NOT NULL DEFAULT 0, PRIMARY KEY ( `uid`,`org_id`,`source_uid` ));
CREATE TABLE `entity_event` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `entity_id` TEXT NOT NULL
, `event_type` TEXT NOT NULL
, `created` INTEGER NOT NULL
);
CREATE TABLE IF NOT EXISTS "dashboard_public" (
`uid` TEXT PRIMARY KEY NOT NULL
, `dashboard_uid` TEXT NOT NULL
, `org_id` INTEGER NOT NULL
, `time_settings` TEXT NULL
, `template_variables` TEXT NULL
, `access_token` TEXT NOT NULL
, `created_by` INTEGER NOT NULL
, `updated_by` INTEGER NULL
, `created_at` DATETIME NOT NULL
, `updated_at` DATETIME NULL
, `is_enabled` INTEGER NOT NULL DEFAULT 0
, `annotations_enabled` INTEGER NOT NULL DEFAULT 0, `time_selection_enabled` INTEGER NOT NULL DEFAULT 0, `share` TEXT NOT NULL DEFAULT 'public');
CREATE TABLE `file` (
`path` TEXT NOT NULL
, `path_hash` TEXT NOT NULL
, `parent_folder_path_hash` TEXT NOT NULL
, `contents` BLOB NOT NULL
, `etag` TEXT NOT NULL
, `cache_control` TEXT NOT NULL
, `content_disposition` TEXT NOT NULL
, `updated` DATETIME NOT NULL
, `created` DATETIME NOT NULL
, `size` INTEGER NOT NULL
, `mime_type` TEXT NOT NULL
);
CREATE TABLE `file_meta` (
`path_hash` TEXT NOT NULL
, `key` TEXT NOT NULL
, `value` TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS "seed_assignment" (
		    id INTEGER PRIMARY KEY AUTOINCREMENT,
			builtin_role TEXT,
			action TEXT,
			scope TEXT,
			role_name TEXT
		, `origin` TEXT NULL);
CREATE TABLE `folder` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `uid` TEXT NOT NULL
, `org_id` INTEGER NOT NULL
, `title` TEXT NOT NULL
, `description` TEXT NULL
, `parent_uid` TEXT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
);
CREATE TABLE `anon_device` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `client_ip` TEXT NOT NULL
, `created_at` DATETIME NOT NULL
, `device_id` TEXT NOT NULL
, `updated_at` DATETIME NOT NULL
, `user_agent` TEXT NOT NULL
);
CREATE TABLE `signing_key` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `key_id` TEXT NOT NULL
, `private_key` TEXT NOT NULL
, `added_at` DATETIME NOT NULL
, `expires_at` DATETIME NULL
, `alg` TEXT NOT NULL
);
CREATE TABLE `sso_setting` (
`id` TEXT PRIMARY KEY NOT NULL
, `provider` TEXT NOT NULL
, `settings` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `is_deleted` INTEGER NOT NULL DEFAULT 0
);
CREATE TABLE `cloud_migration` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `auth_token` TEXT NULL
, `stack` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `stack_id` INTEGER NOT NULL, `region_slug` TEXT NOT NULL, `cluster_slug` TEXT NOT NULL);
CREATE TABLE `cloud_migration_run` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL
, `cloud_migration_uid` TEXT NULL
, `result` TEXT NOT NULL
, `created` DATETIME NOT NULL
, `updated` DATETIME NOT NULL
, `finished` DATETIME NULL
);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('migration_log',559);
INSERT INTO sqlite_sequence VALUES('user',1);
INSERT INTO sqlite_sequence VALUES('temp_user',0);
INSERT INTO sqlite_sequence VALUES('dashboard',7);
INSERT INTO sqlite_sequence VALUES('dashboard_provisioning',0);
INSERT INTO sqlite_sequence VALUES('api_key',0);
INSERT INTO sqlite_sequence VALUES('alert_rule_tag',0);
INSERT INTO sqlite_sequence VALUES('annotation_tag',0);
INSERT INTO sqlite_sequence VALUES('dashboard_version',273);
INSERT INTO sqlite_sequence VALUES('dashboard_acl',2);
INSERT INTO sqlite_sequence VALUES('login_attempt',0);
INSERT INTO sqlite_sequence VALUES('seed_assignment',0);
INSERT INTO sqlite_sequence VALUES('folder',0);
INSERT INTO sqlite_sequence VALUES('kv_store',13);
INSERT INTO sqlite_sequence VALUES('org',1);
INSERT INTO sqlite_sequence VALUES('org_user',1);
INSERT INTO sqlite_sequence VALUES('server_lock',233);
INSERT INTO sqlite_sequence VALUES('alert_configuration',1);
INSERT INTO sqlite_sequence VALUES('alert_configuration_history',1);
INSERT INTO sqlite_sequence VALUES('user_auth_token',12);
INSERT INTO sqlite_sequence VALUES('data_source',6);
INSERT INTO sqlite_sequence VALUES('secrets',6);
INSERT INTO sqlite_sequence VALUES('role',3);
INSERT INTO sqlite_sequence VALUES('user_role',1);
INSERT INTO sqlite_sequence VALUES('permission',142);
INSERT INTO sqlite_sequence VALUES('builtin_role',2);
INSERT INTO sqlite_sequence VALUES('star',4);
INSERT INTO sqlite_sequence VALUES('preferences',2);
INSERT INTO sqlite_sequence VALUES('library_element',1);
INSERT INTO sqlite_sequence VALUES('library_element_connection',4);
INSERT INTO sqlite_sequence VALUES('query_history',5);
INSERT INTO sqlite_sequence VALUES('annotation',4);
CREATE UNIQUE INDEX `UQE_user_login` ON `user` (`login`);
CREATE UNIQUE INDEX `UQE_user_email` ON `user` (`email`);
CREATE INDEX `IDX_user_login_email` ON `user` (`login`,`email`);
CREATE INDEX `IDX_temp_user_email` ON `temp_user` (`email`);
CREATE INDEX `IDX_temp_user_org_id` ON `temp_user` (`org_id`);
CREATE INDEX `IDX_temp_user_code` ON `temp_user` (`code`);
CREATE INDEX `IDX_temp_user_status` ON `temp_user` (`status`);
CREATE UNIQUE INDEX `UQE_star_user_id_dashboard_id` ON `star` (`user_id`,`dashboard_id`);
CREATE UNIQUE INDEX `UQE_org_name` ON `org` (`name`);
CREATE INDEX `IDX_org_user_org_id` ON `org_user` (`org_id`);
CREATE UNIQUE INDEX `UQE_org_user_org_id_user_id` ON `org_user` (`org_id`,`user_id`);
CREATE INDEX `IDX_org_user_user_id` ON `org_user` (`user_id`);
CREATE INDEX `IDX_dashboard_org_id` ON `dashboard` (`org_id`);
CREATE INDEX `IDX_dashboard_gnet_id` ON `dashboard` (`gnet_id`);
CREATE INDEX `IDX_dashboard_org_id_plugin_id` ON `dashboard` (`org_id`,`plugin_id`);
CREATE INDEX `IDX_dashboard_tag_dashboard_id` ON `dashboard_tag` (`dashboard_id`);
CREATE UNIQUE INDEX `UQE_dashboard_org_id_uid` ON `dashboard` (`org_id`,`uid`);
CREATE INDEX `IDX_dashboard_provisioning_dashboard_id` ON `dashboard_provisioning` (`dashboard_id`);
CREATE INDEX `IDX_dashboard_provisioning_dashboard_id_name` ON `dashboard_provisioning` (`dashboard_id`,`name`);
CREATE INDEX `IDX_dashboard_title` ON `dashboard` (`title`);
CREATE INDEX `IDX_dashboard_is_folder` ON `dashboard` (`is_folder`);
CREATE INDEX `IDX_data_source_org_id` ON `data_source` (`org_id`);
CREATE UNIQUE INDEX `UQE_data_source_org_id_name` ON `data_source` (`org_id`,`name`);
CREATE UNIQUE INDEX `UQE_data_source_org_id_uid` ON `data_source` (`org_id`,`uid`);
CREATE INDEX `IDX_data_source_org_id_is_default` ON `data_source` (`org_id`,`is_default`);
CREATE INDEX `IDX_api_key_org_id` ON `api_key` (`org_id`);
CREATE UNIQUE INDEX `UQE_api_key_key` ON `api_key` (`key`);
CREATE UNIQUE INDEX `UQE_api_key_org_id_name` ON `api_key` (`org_id`,`name`);
CREATE UNIQUE INDEX `UQE_dashboard_snapshot_key` ON `dashboard_snapshot` (`key`);
CREATE UNIQUE INDEX `UQE_dashboard_snapshot_delete_key` ON `dashboard_snapshot` (`delete_key`);
CREATE INDEX `IDX_dashboard_snapshot_user_id` ON `dashboard_snapshot` (`user_id`);
CREATE UNIQUE INDEX `UQE_quota_org_id_user_id_target` ON `quota` (`org_id`,`user_id`,`target`);
CREATE UNIQUE INDEX `UQE_plugin_setting_org_id_plugin_id` ON `plugin_setting` (`org_id`,`plugin_id`);
CREATE INDEX `IDX_preferences_org_id` ON `preferences` (`org_id`);
CREATE INDEX `IDX_preferences_user_id` ON `preferences` (`user_id`);
CREATE INDEX `IDX_alert_org_id_id` ON `alert` (`org_id`,`id`);
CREATE INDEX `IDX_alert_state` ON `alert` (`state`);
CREATE INDEX `IDX_alert_dashboard_id` ON `alert` (`dashboard_id`);
CREATE UNIQUE INDEX `UQE_alert_rule_tag_alert_id_tag_id` ON `alert_rule_tag` (`alert_id`,`tag_id`);
CREATE UNIQUE INDEX `UQE_alert_notification_state_org_id_alert_id_notifier_id` ON `alert_notification_state` (`org_id`,`alert_id`,`notifier_id`);
CREATE UNIQUE INDEX `UQE_alert_notification_org_id_uid` ON `alert_notification` (`org_id`,`uid`);
CREATE INDEX `IDX_alert_notification_state_alert_id` ON `alert_notification_state` (`alert_id`);
CREATE INDEX `IDX_alert_rule_tag_alert_id` ON `alert_rule_tag` (`alert_id`);
CREATE INDEX `IDX_annotation_org_id_alert_id` ON `annotation` (`org_id`,`alert_id`);
CREATE INDEX `IDX_annotation_org_id_type` ON `annotation` (`org_id`,`type`);
CREATE UNIQUE INDEX `UQE_annotation_tag_annotation_id_tag_id` ON `annotation_tag` (`annotation_id`,`tag_id`);
CREATE INDEX `IDX_annotation_org_id_created` ON `annotation` (`org_id`,`created`);
CREATE INDEX `IDX_annotation_org_id_updated` ON `annotation` (`org_id`,`updated`);
CREATE INDEX `IDX_annotation_org_id_dashboard_id_epoch_end_epoch` ON `annotation` (`org_id`,`dashboard_id`,`epoch_end`,`epoch`);
CREATE INDEX `IDX_annotation_org_id_epoch_end_epoch` ON `annotation` (`org_id`,`epoch_end`,`epoch`);
CREATE INDEX `IDX_annotation_alert_id` ON `annotation` (`alert_id`);
CREATE INDEX `IDX_dashboard_version_dashboard_id` ON `dashboard_version` (`dashboard_id`);
CREATE UNIQUE INDEX `UQE_dashboard_version_dashboard_id_version` ON `dashboard_version` (`dashboard_id`,`version`);
CREATE INDEX `IDX_team_org_id` ON `team` (`org_id`);
CREATE UNIQUE INDEX `UQE_team_org_id_name` ON `team` (`org_id`,`name`);
CREATE UNIQUE INDEX `UQE_team_org_id_uid` ON `team` (`org_id`,`uid`);
CREATE INDEX `IDX_team_member_org_id` ON `team_member` (`org_id`);
CREATE UNIQUE INDEX `UQE_team_member_org_id_team_id_user_id` ON `team_member` (`org_id`,`team_id`,`user_id`);
CREATE INDEX `IDX_team_member_team_id` ON `team_member` (`team_id`);
CREATE INDEX `IDX_dashboard_acl_dashboard_id` ON `dashboard_acl` (`dashboard_id`);
CREATE UNIQUE INDEX `UQE_dashboard_acl_dashboard_id_user_id` ON `dashboard_acl` (`dashboard_id`,`user_id`);
CREATE UNIQUE INDEX `UQE_dashboard_acl_dashboard_id_team_id` ON `dashboard_acl` (`dashboard_id`,`team_id`);
CREATE INDEX `IDX_dashboard_acl_user_id` ON `dashboard_acl` (`user_id`);
CREATE INDEX `IDX_dashboard_acl_team_id` ON `dashboard_acl` (`team_id`);
CREATE INDEX `IDX_dashboard_acl_org_id_role` ON `dashboard_acl` (`org_id`,`role`);
CREATE INDEX `IDX_dashboard_acl_permission` ON `dashboard_acl` (`permission`);
CREATE UNIQUE INDEX `UQE_tag_key_value` ON `tag` (`key`,`value`);
CREATE INDEX `IDX_login_attempt_username` ON `login_attempt` (`username`);
CREATE INDEX `IDX_user_auth_auth_module_auth_id` ON `user_auth` (`auth_module`,`auth_id`);
CREATE INDEX `IDX_user_auth_user_id` ON `user_auth` (`user_id`);
CREATE UNIQUE INDEX `UQE_server_lock_operation_uid` ON `server_lock` (`operation_uid`);
CREATE UNIQUE INDEX `UQE_user_auth_token_auth_token` ON `user_auth_token` (`auth_token`);
CREATE UNIQUE INDEX `UQE_user_auth_token_prev_auth_token` ON `user_auth_token` (`prev_auth_token`);
CREATE INDEX `IDX_user_auth_token_user_id` ON `user_auth_token` (`user_id`);
CREATE INDEX `IDX_user_auth_token_revoked_at` ON `user_auth_token` (`revoked_at`);
CREATE UNIQUE INDEX `UQE_cache_data_cache_key` ON `cache_data` (`cache_key`);
CREATE UNIQUE INDEX `UQE_short_url_org_id_uid` ON `short_url` (`org_id`,`uid`);
CREATE INDEX `IDX_alert_instance_rule_org_id_rule_uid_current_state` ON `alert_instance` (`rule_org_id`,`rule_uid`,`current_state`);
CREATE INDEX `IDX_alert_instance_rule_org_id_current_state` ON `alert_instance` (`rule_org_id`,`current_state`);
CREATE UNIQUE INDEX `UQE_alert_rule_org_id_uid` ON `alert_rule` (`org_id`,`uid`);
CREATE INDEX `IDX_alert_rule_org_id_namespace_uid_rule_group` ON `alert_rule` (`org_id`,`namespace_uid`,`rule_group`);
CREATE UNIQUE INDEX `UQE_alert_rule_org_id_namespace_uid_title` ON `alert_rule` (`org_id`,`namespace_uid`,`title`);
CREATE INDEX `IDX_alert_rule_org_id_dashboard_uid_panel_id` ON `alert_rule` (`org_id`,`dashboard_uid`,`panel_id`);
CREATE UNIQUE INDEX `UQE_alert_rule_version_rule_org_id_rule_uid_version` ON `alert_rule_version` (`rule_org_id`,`rule_uid`,`version`);
CREATE INDEX `IDX_alert_rule_version_rule_org_id_rule_namespace_uid_rule_group` ON `alert_rule_version` (`rule_org_id`,`rule_namespace_uid`,`rule_group`);
CREATE UNIQUE INDEX `UQE_ngalert_configuration_org_id` ON `ngalert_configuration` (`org_id`);
CREATE UNIQUE INDEX `UQE_provenance_type_record_type_record_key_org_id` ON `provenance_type` (`record_type`,`record_key`,`org_id`);
CREATE UNIQUE INDEX `UQE_alert_image_token` ON `alert_image` (`token`);
CREATE UNIQUE INDEX `UQE_alert_configuration_org_id` ON `alert_configuration` (`org_id`);
CREATE UNIQUE INDEX `UQE_library_element_org_id_folder_id_name_kind` ON `library_element` (`org_id`,`folder_id`,`name`,`kind`);
CREATE UNIQUE INDEX `UQE_library_element_connection_element_id_kind_connection_id` ON `library_element_connection` (`element_id`,`kind`,`connection_id`);
CREATE UNIQUE INDEX `UQE_library_element_org_id_uid` ON `library_element` (`org_id`,`uid`);
CREATE UNIQUE INDEX `UQE_kv_store_org_id_namespace_key` ON `kv_store` (`org_id`,`namespace`,`key`);
CREATE INDEX `IDX_permission_role_id` ON `permission` (`role_id`);
CREATE INDEX `IDX_role_org_id` ON `role` (`org_id`);
CREATE UNIQUE INDEX `UQE_role_org_id_name` ON `role` (`org_id`,`name`);
CREATE INDEX `IDX_team_role_org_id` ON `team_role` (`org_id`);
CREATE UNIQUE INDEX `UQE_team_role_org_id_team_id_role_id` ON `team_role` (`org_id`,`team_id`,`role_id`);
CREATE INDEX `IDX_team_role_team_id` ON `team_role` (`team_id`);
CREATE INDEX `IDX_user_role_org_id` ON `user_role` (`org_id`);
CREATE UNIQUE INDEX `UQE_user_role_org_id_user_id_role_id` ON `user_role` (`org_id`,`user_id`,`role_id`);
CREATE INDEX `IDX_user_role_user_id` ON `user_role` (`user_id`);
CREATE INDEX `IDX_builtin_role_role_id` ON `builtin_role` (`role_id`);
CREATE INDEX `IDX_builtin_role_role` ON `builtin_role` (`role`);
CREATE INDEX `IDX_builtin_role_org_id` ON `builtin_role` (`org_id`);
CREATE UNIQUE INDEX `UQE_builtin_role_org_id_role_id_role` ON `builtin_role` (`org_id`,`role_id`,`role`);
CREATE UNIQUE INDEX `UQE_role_uid` ON `role` (`uid`);
CREATE INDEX `IDX_permission_identifier` ON `permission` (`identifier`);
CREATE INDEX `IDX_query_history_org_id_created_by_datasource_uid` ON `query_history` (`org_id`,`created_by`,`datasource_uid`);
CREATE UNIQUE INDEX `UQE_query_history_star_user_id_query_uid` ON `query_history_star` (`user_id`,`query_uid`);
CREATE INDEX `IDX_correlation_uid` ON `correlation` (`uid`);
CREATE INDEX `IDX_correlation_source_uid` ON `correlation` (`source_uid`);
CREATE INDEX `IDX_correlation_org_id` ON `correlation` (`org_id`);
CREATE UNIQUE INDEX `UQE_dashboard_public_config_uid` ON "dashboard_public" (`uid`);
CREATE INDEX `IDX_dashboard_public_config_org_id_dashboard_uid` ON "dashboard_public" (`org_id`,`dashboard_uid`);
CREATE UNIQUE INDEX `UQE_dashboard_public_config_access_token` ON "dashboard_public" (`access_token`);
CREATE UNIQUE INDEX `UQE_file_path_hash` ON `file` (`path_hash`);
CREATE INDEX `IDX_file_parent_folder_path_hash` ON `file` (`parent_folder_path_hash`);
CREATE UNIQUE INDEX `UQE_file_meta_path_hash_key` ON `file_meta` (`path_hash`,`key`);
CREATE UNIQUE INDEX `UQE_playlist_org_id_uid` ON `playlist` (`org_id`,`uid`);
CREATE UNIQUE INDEX UQE_seed_assignment_builtin_role_action_scope ON seed_assignment (builtin_role, action, scope);
CREATE UNIQUE INDEX UQE_seed_assignment_builtin_role_role_name ON seed_assignment (builtin_role, role_name);
CREATE UNIQUE INDEX `UQE_anon_device_device_id` ON `anon_device` (`device_id`);
CREATE INDEX `IDX_anon_device_updated_at` ON `anon_device` (`updated_at`);
CREATE UNIQUE INDEX `UQE_signing_key_key_id` ON `signing_key` (`key_id`);
CREATE UNIQUE INDEX `UQE_user_uid` ON `user` (`uid`);
CREATE UNIQUE INDEX `UQE_permission_action_scope_role_id` ON `permission` (`action`,`scope`,`role_id`);
CREATE UNIQUE INDEX `UQE_folder_org_id_uid` ON `folder` (`org_id`,`uid`);
CREATE UNIQUE INDEX `UQE_folder_org_id_parent_uid_title` ON `folder` (`org_id`,`parent_uid`,`title`);
CREATE UNIQUE INDEX `UQE_dashboard_org_id_folder_uid_title_is_folder` ON `dashboard` (`org_id`,`folder_uid`,`title`,`is_folder`);
CREATE INDEX `IDX_dashboard_org_id_folder_id_title` ON `dashboard` (`org_id`,`folder_id`,`title`);
CREATE UNIQUE INDEX `UQE_library_element_org_id_folder_uid_name_kind` ON `library_element` (`org_id`,`folder_uid`,`name`,`kind`);
COMMIT;
