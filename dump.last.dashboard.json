{"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":0,"id":4,"links":[{"asDropdown":false,"icon":"cloud","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Data Sources","tooltip":"Data Sources","type":"link","url":"/connections/datasources"},{"asDropdown":false,"icon":"external link","includeVars":false,"keepTime":false,"tags":[],"targetBlank":false,"title":"Home","tooltip":"","type":"dashboards","url":""}],"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":6,"panels":[],"repeat":"server","repeatDirection":"h","title":"Active Session History - $server","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"description":"","fieldConfig":{"defaults":{"color":{"fixedColor":"#ffffff","mode":"shades"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":100,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"stepBefore","lineWidth":0,"pointSize":1,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"short"},"overrides":[{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Cpu:QueryProcessing"},"properties":[{"id":"color","value":{"fixedColor":"green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Client:ClientRead"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery Extension:Extension"},"properties":[{"id":"color","value":{"fixedColor":"super-light-yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:CatalogRead"},"properties":[{"id":"color","value":{"fixedColor":"red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageRead"},"properties":[{"id":"color","value":{"fixedColor":"dark-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL TServerWait Network:StorageFlush"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS YSQL YSQLQuery IO:BufFileRead"},"properties":[{"id":"color","value":{"fixedColor":"super-light-blue","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Cpu:Raft_ApplyingEdits"},"properties":[{"id":"color","value":{"fixedColor":"light-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer TabletWait:TransactionStatusCache_DoGetCommitData"},"properties":[{"id":"color","value":{"fixedColor":"super-light-red","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Consensus Network:Raft_WaitingForReplication"},"properties":[{"id":"color","value":{"fixedColor":"dark-purple","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Client Network:YBClient_WaitingOnDocDB"},"properties":[{"id":"color","value":{"fixedColor":"yellow","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Active"},"properties":[{"id":"color","value":{"fixedColor":"dark-green","mode":"fixed"}}]},{"matcher":{"id":"byName","options":"AAS TServer Common Cpu:OnCpu_Passive"},"properties":[{"id":"color","value":{"fixedColor":"light-green","mode":"fixed"}}]}]},"gridPos":{"h":9,"w":12,"x":0,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true,"width":350},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"10.4.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format('%s %s %s:%s',wait_event_component,wait_event_class,wait_event_type,wait_event)\r\n, sum(sample_weight) as \"AAS\"\r\nfrom gv$yb_active_session_history\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)\r\ngroup by\r\nsample_time,wait_event_component,wait_event_type ,wait_event_class,wait_event\r\norder by sample_time,sum(sample_weight) ,\r\nwait_event_component,wait_event_type,wait_event_class,wait_event\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Wait Event - $component - $server","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":120},"id":14,"panels":[],"title":"Statements","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":82,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":0,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":15,"w":12,"x":0,"y":121},"id":22,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"component","repeatDirection":"h","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format('/* %s */ %s',query_id,coalesce(query,\r\ncase query_id -- https://github.com/yugabyte/yugabyte-db/blob/d040fd81ea14e83c08300daf5e2f0c7a0eab42de/src/yb/ash/wait_state.h#L195\r\nwhen 1 then '-- background: kQueryIdForLogAppender'\r\nwhen 2 then '-- background: kQueryIdForFlush'\r\nwhen 3 then '-- background: kQueryIdForCompaction'\r\nwhen 4 then '-- background: kQueryIdForRaftUpdateConsensus'\r\nwhen 5 then '-- background: kQueryIdForCatalogRequests'\r\nwhen 6 then '-- background: kQueryIdForLogBackgroundSync'\r\nend,' -- not in pg_stat_statements'))\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\nleft outer join (select queryid as query_id, gv$host,query, calls, rows, total_time from gv$pg_stat_statements) stmts \r\nusing (gv$host, query_id)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server) \r\n)group by\r\nsample_time,query_id,query\r\norder by sample_time,sum(sample_weight) ,\r\nquery_id\r\n;","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Statements - $component","type":"timeseries"},{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":136},"id":31,"panels":[],"title":"Tablets","type":"row"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisBorderShow":false,"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"bars","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"insertNulls":false,"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"normal"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":11,"w":24,"x":0,"y":137},"id":39,"options":{"legend":{"calcs":["mean","max","last"],"displayMode":"table","placement":"bottom","showLegend":true,"sortBy":"Mean","sortDesc":true},"tooltip":{"maxHeight":600,"mode":"multi","sort":"desc"}},"pluginVersion":"11.0.1","repeat":"server","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format('%s.%s %s.%s [%s,%s] %s',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id\r\norder by sample_time,sum(sample_weight) ,\r\ntable_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"timeseries"},{"datasource":{"type":"grafana-postgresql-datasource","uid":"${datasource}"},"fieldConfig":{"defaults":{"custom":{"hideFrom":{"legend":false,"tooltip":false,"viz":false},"scaleDistribution":{"type":"linear"}}},"overrides":[]},"gridPos":{"h":25,"w":17,"x":0,"y":269},"id":47,"options":{"calculate":false,"cellGap":1,"color":{"exponent":0.1,"fill":"dark-orange","mode":"opacity","reverse":true,"scale":"exponential","scheme":"Oranges","steps":100},"exemplars":{"color":"rgba(255,0,255,0.7)"},"filterValues":{"le":1e-9},"legend":{"show":true},"rowsFrame":{"layout":"auto"},"tooltip":{"maxHeight":600,"mode":"multi","showColorScale":false,"yHistogram":false},"yAxis":{"axisPlacement":"left","axisWidth":600,"reverse":false}},"pluginVersion":"11.0.1","repeatDirection":"v","targets":[{"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"editorMode":"code","format":"time_series","rawQuery":true,"rawSql":"select\r\nsample_time::timestamp as \"time\"\r\n,format('%s.%s %s.%s [%s,%s] %s %s',table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host)\r\n, sum(sample_weight) as \" \"\r\nfrom gv$yb_active_session_history\r\njoin (select substr(tablet_id,1,15) as wait_event_aux, gv$host, table_id, table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, tablet_id from gv$yb_local_tablets) stmts\r\nusing (gv$host, wait_event_aux)\r\nwhere sample_time between $__timeFrom() and $__timeTo()\r\nAnd wait_event_component in ($component)\r\nand (\r\n  gv$host in ($server) or gv$zone in ($server) or gv$region in ($server) or gv$cloud in ($server)\r\n)\r\ngroup by\r\nsample_time,table_id,table_type, namespace_name, ysql_schema_name, table_name, partition_key_start, partition_key_end, wait_event_aux, gv$host\r\n--having sum(sample_weight)\u003e=1\r\norder by sample_time,sum(sample_weight) , table_id\r\n;\r\n","refId":"A","sql":{"columns":[{"parameters":[],"type":"function"}],"groupBy":[{"property":{"type":"string"},"type":"groupBy"}],"limit":50}}],"title":"Tablets - $server","type":"heatmap"}],"refresh":"","schemaVersion":39,"tags":[],"templating":{"list":[{"current":{"selected":false,"text":"YugabyteDB","value":"bdqrt8jw728sgb"},"hide":0,"includeAll":false,"label":"YugabyteDB Data Source","multi":false,"name":"datasource","options":[],"query":"grafana-postgresql-datasource","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"current":{"selected":false,"text":"Host","value":"Host"},"hide":0,"includeAll":false,"label":"Aggregation","multi":false,"name":"agg","options":[{"selected":true,"text":"Host","value":"Host"},{"selected":false,"text":"Zone","value":"Zone"},{"selected":false,"text":"Region","value":"Region"},{"selected":false,"text":"Cloud","value":"Cloud"}],"query":"Host, Zone, Region, Cloud","queryValue":"","skipUrlSync":false,"type":"custom"},{"allValue":"'') or (true ","current":{"selected":true,"text":["All"],"value":["$__all"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"-- script to create the GV$ views though Foreign Data  Wrapper\n-- It should not need the password as it uses current_user, but I didn't test it.\n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw( options text default '') returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute 'create extension if not exists postgres_fdw';\n  execute 'drop foreign data wrapper if exists yb_ash_fdw cascade';\n  execute 'create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler';\n  for ddl in (\n    select format('\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     ', \"uuid\", host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice '(create server) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format('\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\" %2$s\n     ',\"uuid\", options) as sql\n     from yb_servers()\n  ) loop\n   raise notice '(create user mapping) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format('\n     drop schema if exists \"gv$%1$s\" cascade\n     ',\"uuid\") as sql\n     from yb_servers()\n  ) loop\n   raise notice '(drop schema) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format('\n     create schema if not exists \"gv$%1$s\"\n     ',\"uuid\") as sql\n     from yb_servers()\n  ) loop\n   raise notice '(create schema) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format('\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     ', \"uuid\") as sql from yb_servers()\n  ) loop\n   raise notice '(import foreign schema) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format('gv$%1$s',s.\"uuid\")\n    )\n    select format('create view public.\"gv$%2$s\" as %1$s',\n     string_agg(\n     format('\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%6$s\".%1$I\n     ', foreign_table_name, host, zone, region, cloud, uuid)\n     ,' union all '), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice '(create views) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query\nselect distinct format('%s.%s.%s %s',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where '$agg'='Host'\nunion all\nselect distinct format('%s.%s.%s',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where '$agg'='Zone'\nunion all\nselect distinct format('%s.%s',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where '$agg'='Region'\nunion all\nselect distinct format('%s',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where '$agg'='Cloud'\n;\n end;\n$PL$ language plpgsql;\n\n-- password is hardcoded here\nselect \"__text\", \"__value\"\nfrom yb_ash_fdw(\n $$ options ( password 'yugabyte' ) $$\n)\n;\n","hide":0,"includeAll":true,"label":"Hosts","multi":true,"name":"server","options":[],"query":"-- script to create the GV$ views though Foreign Data  Wrapper\n-- It should not need the password as it uses current_user, but I didn't test it.\n\ndrop function if exists yb_ash_fdw;\ncreate function yb_ash_fdw( options text default '') returns table (\"__text\" text, \"__value\" text) as $PL$\n declare\n  ddl record;\n begin\n  execute 'create extension if not exists postgres_fdw';\n  execute 'drop foreign data wrapper if exists yb_ash_fdw cascade';\n  execute 'create foreign data wrapper yb_ash_fdw handler postgres_fdw_handler';\n  for ddl in (\n    select format('\n     create server if not exists \"gv$%1$s\"\n     foreign data wrapper yb_ash_fdw\n     options (host %2$L, port %3$L, dbname %4$L)\n     ', \"uuid\", host, port, current_database()) as sql\n     from yb_servers()\n  ) loop\n   raise notice '(create server) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format('\n     create user mapping if not exists for current_user\n     server \"gv$%1$s\" %2$s\n     ',\"uuid\", options) as sql\n     from yb_servers()\n  ) loop\n   raise notice '(create user mapping) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format('\n     drop schema if exists \"gv$%1$s\" cascade\n     ',\"uuid\") as sql\n     from yb_servers()\n  ) loop\n   raise notice '(drop schema) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format('\n     create schema if not exists \"gv$%1$s\"\n     ',\"uuid\") as sql\n     from yb_servers()\n  ) loop\n   raise notice '(create schema) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    select format('\n     import foreign schema \"pg_catalog\"\n     limit to (\"yb_active_session_history\",\"pg_stat_statements\",\"yb_local_tablets\")\n     from server \"gv$%1$s\" into \"gv$%1$s\"\n     ', \"uuid\") as sql from yb_servers()\n  ) loop\n   raise notice '(import foreign schema) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  for ddl in (\n    with views as (\n    select distinct foreign_table_name\n    from information_schema.foreign_tables t, yb_servers() s\n    where foreign_table_schema = format('gv$%1$s',s.\"uuid\")\n    )\n    select format('create view public.\"gv$%2$s\" as %1$s',\n     string_agg(\n     format('\n     select %2$L as gv$host, %3$L as gv$zone, %4$L as gv$region, %5$L as gv$cloud,\n     * from \"gv$%6$s\".%1$I\n     ', foreign_table_name, host, zone, region, cloud, uuid)\n     ,' union all '), foreign_table_name\n    ) as sql from views, yb_servers() group by views.foreign_table_name\n  ) loop\n   raise notice '(create views) SQL: %', ddl.sql ; execute ddl.sql;\n  end loop;\n  return query\nselect distinct format('%s.%s.%s %s',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$host as \"__value\"\nfrom gv$yb_active_session_history  where '$agg'='Host'\nunion all\nselect distinct format('%s.%s.%s',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$zone as \"__value\"\nfrom gv$yb_active_session_history where '$agg'='Zone'\nunion all\nselect distinct format('%s.%s',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$region as \"__value\"\nfrom gv$yb_active_session_history where '$agg'='Region'\nunion all\nselect distinct format('%s',gv$cloud,gv$region,gv$zone,gv$host) as \"__text\" , gv$cloud as \"__value\"\nfrom gv$yb_active_session_history where '$agg'='Cloud'\n;\n end;\n$PL$ language plpgsql;\n\n-- password is hardcoded here\nselect \"__text\", \"__value\"\nfrom yb_ash_fdw(\n $$ options ( password 'yugabyte' ) $$\n)\n;\n","refresh":1,"regex":"","skipUrlSync":false,"sort":1,"type":"query"},{"current":{"selected":true,"text":["YSQL","TServer"],"value":["YSQL","TServer"]},"datasource":{"type":" grafana-yugabyte-datasource","uid":"${datasource}"},"definition":"select distinct wait_event_component from gv$yb_active_session_history","hide":0,"includeAll":false,"label":"ASH","multi":true,"name":"component","options":[],"query":"select distinct wait_event_component from gv$yb_active_session_history","refresh":1,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-5m","to":"now"},"timeRangeUpdatedDuringEditOrView":false,"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"]},"timezone":"browser","title":"Active Session History","uid":"cdh1ginpqkwlcc","version":91,"weekStart":""}
